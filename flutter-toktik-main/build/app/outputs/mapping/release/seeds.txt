androidx.lifecycle.LiveData$LifecycleBoundObserver
androidx.window.layout.ExtensionInterfaceCompat$ExtensionCallbackInterface
androidx.window.layout.SidecarCompat$DistinctElementCallback
androidx.window.layout.FoldingFeature$Orientation$Companion
androidx.lifecycle.FullLifecycleObserverAdapter
kotlinx.coroutines.internal.MainDispatcherFactory
androidx.window.layout.WindowMetricsCalculator$Companion$reset$1
androidx.window.layout.FoldingFeature$OcclusionType
androidx.window.embedding.EmbeddingCompat
androidx.window.R$id
androidx.window.layout.ExtensionWindowLayoutInfoBackend
androidx.activity.ImmLeaksCleaner
androidx.window.layout.EmptyDecorator
androidx.window.embedding.SplitRule$Api30Impl
kotlin.coroutines.jvm.internal.BaseContinuationImpl
androidx.window.layout.SidecarCompat
androidx.window.layout.WindowLayoutInfo
androidx.window.layout.SidecarWindowBackend
androidx.window.embedding.ActivityRule
androidx.core.graphics.drawable.IconCompatParcelizer
androidx.activity.ComponentActivity$2
androidx.window.embedding.ActivityStack
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1$invokeSuspend$$inlined$collect$1
io.flutter.embedding.engine.FlutterJNI
android.support.v4.graphics.drawable.IconCompatParcelizer
androidx.window.layout.SidecarWindowBackend$ExtensionListenerImpl
androidx.window.embedding.ExtensionEmbeddingBackend
androidx.window.layout.DisplayCompatHelperApi17
androidx.activity.OnBackPressedDispatcher$LifecycleOnBackPressedCancellable
androidx.window.layout.FoldingFeature$Orientation
androidx.versionedparcelable.ParcelImpl
androidx.lifecycle.ReflectiveGenericLifecycleObserver
androidx.window.layout.WindowInfoTrackerImpl$Companion
androidx.window.layout.HardwareFoldingFeature$Companion
androidx.window.layout.FoldingFeature$State
androidx.window.layout.DisplayCompatHelperApi28
kotlinx.coroutines.CoroutineExceptionHandler
kotlinx.coroutines.android.AndroidExceptionPreHandler
androidx.window.layout.SidecarCompat$Companion
androidx.savedstate.Recreator
androidx.window.embedding.SplitController
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer
androidx.lifecycle.Lifecycling$1
io.flutter.embedding.engine.FlutterOverlaySurface
androidx.window.embedding.EmptyEmbeddingComponent
androidx.window.layout.HardwareFoldingFeature$Type$Companion
com.example.toktik.MainActivity
kotlin.internal.jdk7.JDK7PlatformImplementations
androidx.window.embedding.EmbeddingInterfaceCompat
kotlinx.coroutines.android.AndroidDispatcherFactory
androidx.window.embedding.EmbeddingRule
androidx.window.layout.ExtensionsWindowLayoutInfoAdapter
androidx.versionedparcelable.CustomVersionedParcelable
androidx.window.layout.WindowBackend
androidx.window.core.Version
androidx.window.layout.WindowMetricsCalculator$Companion
androidx.annotation.Keep
androidx.window.embedding.EmbeddingTranslatingCallback
androidx.window.embedding.SplitInfo
io.flutter.embedding.engine.plugins.lifecycle.HiddenLifecycleReference
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1
androidx.window.layout.FoldingFeature
io.flutter.embedding.android.FlutterSplashView$SavedState
androidx.window.layout.ActivityCompatHelperApi30
androidx.window.embedding.ExtensionEmbeddingBackend$Companion
androidx.window.java.R
androidx.window.embedding.SplitRule$LayoutDir
androidx.window.layout.DisplayFeature
androidx.window.R$styleable
androidx.fragment.app.Fragment$2
androidx.window.layout.WindowMetricsCalculatorDecorator
androidx.core.graphics.drawable.IconCompat
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack
androidx.window.embedding.ActivityFilter
androidx.window.layout.WindowMetrics
com.google.android.exoplayer2.source.smoothstreaming.SsMediaSource$Factory
androidx.core.app.RemoteActionCompatParcelizer
androidx.window.R
androidx.window.layout.ActivityCompatHelperApi24
io.flutter.view.FlutterCallbackInformation
androidx.window.layout.WindowMetricsCalculator$Companion$overrideDecorator$1
androidx.window.embedding.ExtensionEmbeddingBackend$EmbeddingCallbackImpl
androidx.window.embedding.SplitRule
androidx.lifecycle.SingleGeneratedAdapterObserver
androidx.window.layout.WindowInfoTracker
androidx.window.embedding.MatcherUtils
androidx.window.layout.FoldingFeature$OcclusionType$Companion
androidx.core.app.RemoteActionCompat
androidx.window.embedding.SplitController$Companion
androidx.window.core.Bounds
com.google.android.exoplayer2.source.hls.HlsMediaSource$Factory
androidx.window.layout.SidecarAdapter
kotlinx.coroutines.internal.StackTraceRecoveryKt
androidx.activity.ComponentActivity$3
androidx.window.embedding.SplitRuleParser
androidx.window.embedding.SplitPairFilter
androidx.window.layout.SidecarCompat$DistinctSidecarElementCallback
androidx.window.layout.SidecarCompat$TranslatingCallback
androidx.window.layout.WindowMetricsCalculatorCompat
androidx.window.layout.HardwareFoldingFeature$Type
androidx.window.layout.SidecarCompat$registerConfigurationChangeListener$configChangeObserver$1
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper
androidx.window.core.Version$Companion
com.google.android.exoplayer2.source.dash.DashMediaSource$Factory
androidx.window.layout.HardwareFoldingFeature
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter
androidx.window.layout.WindowMetricsCalculator
androidx.window.layout.SidecarAdapter$Companion
androidx.window.embedding.EmbeddingBackend
androidx.window.embedding.EmbeddingCompat$Companion
androidx.window.embedding.SplitPairRule
io.flutter.plugins.GeneratedPluginRegistrant
androidx.core.app.CoreComponentFactory
androidx.window.embedding.EmbeddingInterfaceCompat$EmbeddingCallbackInterface
androidx.window.core.Version$bigInteger$2
io.flutter.plugin.platform.SingleViewPresentation
androidx.window.embedding.SplitPlaceholderRule
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper
androidx.window.layout.SidecarWindowBackend$Companion
androidx.window.layout.WindowInfoTracker$Companion
kotlin.internal.jdk8.JDK8PlatformImplementations
androidx.window.layout.SidecarCompat$FirstAttachAdapter
androidx.window.embedding.EmbeddingAdapter
androidx.window.layout.ExtensionInterfaceCompat
androidx.savedstate.SavedStateRegistry$1
androidx.window.layout.WindowInfoTrackerImpl
androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper
androidx.window.core.ExperimentalWindowApi
android.support.v4.app.RemoteActionCompatParcelizer
io.flutter.view.AccessibilityViewEmbedder
androidx.lifecycle.CompositeGeneratedAdaptersObserver
androidx.window.layout.WindowMetricsCalculator$Companion$decorator$1
androidx.window.layout.WindowInfoTrackerDecorator
androidx.window.R$attr
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1
androidx.window.layout.FoldingFeature$State$Companion
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event[] $VALUES
androidx.window.embedding.ActivityRule: java.util.Set filters
androidx.window.layout.SidecarCompat: androidx.window.sidecar.SidecarInterface sidecar
androidx.window.layout.EmptyDecorator: androidx.window.layout.EmptyDecorator INSTANCE
androidx.window.layout.FoldingFeature$State: androidx.window.layout.FoldingFeature$State FLAT
androidx.window.layout.ActivityCompatHelperApi30: androidx.window.layout.ActivityCompatHelperApi30 INSTANCE
androidx.window.embedding.SplitPairRule: boolean finishPrimaryWithSecondary
androidx.window.core.Version: int major
kotlinx.coroutines.android.HandlerDispatcherKt: android.view.Choreographer choreographer
com.google.android.exoplayer2.metadata.scte35.SpliceNullCommand: android.os.Parcelable$Creator CREATOR
androidx.window.embedding.SplitPairFilter: java.lang.String secondaryActivityIntentAction
kotlin.coroutines.AbstractCoroutineContextElement: kotlin.coroutines.CoroutineContext$Key key
kotlin.jvm.internal.CallableReference: java.lang.String name
androidx.window.layout.SidecarCompat$DistinctSidecarElementCallback: androidx.window.layout.SidecarAdapter sidecarAdapter
kotlinx.coroutines.JobSupport$Finishing: java.lang.Object _exceptionsHolder
kotlinx.coroutines.EventLoopImplBase: java.lang.Object _delayed
io.flutter.embedding.engine.FlutterJNI: boolean loadLibraryCalled
androidx.window.layout.SidecarCompat$DistinctSidecarElementCallback: androidx.window.sidecar.SidecarDeviceState lastDeviceState
androidx.window.R$styleable: int[] SplitPairFilter
androidx.window.embedding.SplitPairFilter: android.content.ComponentName secondaryActivityName
androidx.window.layout.WindowInfoTrackerImpl: int BUFFER_CAPACITY
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: android.graphics.SurfaceTexture surfaceTexture
io.flutter.view.AccessibilityViewEmbedder: android.view.View rootAccessibilityView
androidx.window.layout.FoldingFeature$Orientation: androidx.window.layout.FoldingFeature$Orientation VERTICAL
androidx.window.R$id: int rtl
com.google.android.exoplayer2.metadata.id3.ChapterFrame: android.os.Parcelable$Creator CREATOR
kotlinx.coroutines.JobSupport: java.lang.Object _parentHandle
io.flutter.embedding.engine.FlutterJNI: java.lang.String vmServiceUri
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: java.util.Map consumerToJobMap
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: int label
io.flutter.plugin.platform.SingleViewPresentation: android.view.View$OnFocusChangeListener focusChangeListener
androidx.window.layout.FoldingFeature$OcclusionType: java.lang.String description
androidx.window.layout.WindowMetrics: androidx.window.core.Bounds _bounds
kotlinx.coroutines.scheduling.CoroutineScheduler: int _isTerminated
androidx.window.R$attr: int secondaryActivityAction
androidx.window.R$attr: int activityName
io.flutter.embedding.engine.FlutterJNI: java.util.Set engineLifecycleListeners
androidx.window.R$styleable: int SplitPairRule_splitLayoutDirection
kotlinx.coroutines.CompletedExceptionally: int _handled
com.google.android.exoplayer2.metadata.vorbis.VorbisComment: android.os.Parcelable$Creator CREATOR
kotlinx.coroutines.internal.LockFreeLinkedListNode: java.lang.Object _next
androidx.window.R$styleable: int[] SplitPlaceholderRule
androidx.window.layout.SidecarWindowBackend: java.lang.String TAG
com.google.android.exoplayer2.metadata.scte35.TimeSignalCommand: android.os.Parcelable$Creator CREATOR
androidx.window.embedding.ExtensionEmbeddingBackend$EmbeddingCallbackImpl: java.util.List lastInfo
kotlin.jvm.internal.FunctionReference: int flags
androidx.window.layout.SidecarWindowBackend$ExtensionListenerImpl: androidx.window.layout.SidecarWindowBackend this$0
androidx.window.layout.ExtensionWindowLayoutInfoBackend: java.util.concurrent.locks.ReentrantLock extensionWindowBackendLock
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: kotlinx.coroutines.flow.Flow $flow
androidx.window.R$styleable: int[] SplitPairRule
androidx.window.embedding.ActivityFilter: android.content.ComponentName componentName
kotlinx.coroutines.internal.DispatchedContinuation: java.lang.Object _reusableCancellableContinuation
androidx.window.core.Version: androidx.window.core.Version CURRENT
io.flutter.plugin.platform.SingleViewPresentation: java.lang.String TAG
kotlinx.coroutines.scheduling.WorkQueue: int producerIndex
androidx.window.R$styleable: int SplitPlaceholderRule_splitLayoutDirection
kotlinx.coroutines.JobSupport: java.lang.Object _state
kotlin.jvm.internal.CallableReference: kotlin.reflect.KCallable reflected
androidx.window.layout.SidecarCompat$DistinctSidecarElementCallback: androidx.window.sidecar.SidecarInterface$SidecarCallback callbackInterface
io.flutter.embedding.engine.FlutterJNI: float displayWidth
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.deferredcomponents.DeferredComponentManager deferredComponentManager
androidx.window.embedding.EmbeddingCompat: androidx.window.extensions.embedding.ActivityEmbeddingComponent embeddingExtension
androidx.window.R$styleable: int ActivityFilter_activityAction
androidx.window.embedding.SplitRule: int minSmallestWidth
io.flutter.embedding.android.FlutterSplashView$SavedState: android.os.Parcelable$Creator CREATOR
androidx.window.embedding.ExtensionEmbeddingBackend: androidx.window.embedding.ExtensionEmbeddingBackend globalInstance
androidx.window.layout.SidecarAdapter: java.lang.String TAG
androidx.window.R$attr: int secondaryActivityName
androidx.window.layout.WindowInfoTracker: androidx.window.layout.WindowInfoTracker$Companion Companion
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: androidx.window.layout.WindowLayoutInfo lastKnownValue
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: java.lang.Object nextParkedWorker
kotlinx.coroutines.internal.LockFreeLinkedListNode: java.lang.Object _prev
io.flutter.embedding.engine.FlutterJNI: float refreshRateFPS
io.flutter.embedding.engine.FlutterJNI: boolean prefetchDefaultFontManagerCalled
androidx.window.core.Version: java.lang.String description
androidx.window.R$id: int androidx_window_activity_scope
androidx.window.layout.FoldingFeature$Orientation: androidx.window.layout.FoldingFeature$Orientation HORIZONTAL
androidx.window.R$styleable: int ActivityFilter_activityName
androidx.window.layout.SidecarCompat$TranslatingCallback: androidx.window.layout.SidecarCompat this$0
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean needsSave
androidx.window.R$styleable: int ActivityRule_alwaysExpand
kotlin.jvm.internal.FunctionReference: int arity
kotlinx.coroutines.InvokeOnCancelling: int _invoked
com.google.android.exoplayer2.metadata.scte35.PrivateCommand: android.os.Parcelable$Creator CREATOR
com.google.android.exoplayer2.drm.DrmInitData: android.os.Parcelable$Creator CREATOR
androidx.window.R$styleable: int SplitPairFilter_secondaryActivityAction
androidx.window.R$styleable: int SplitPairRule_finishSecondaryWithPrimary
kotlin.jvm.internal.CallableReference: java.lang.Object NO_RECEIVER
io.flutter.view.AccessibilityViewEmbedder: java.util.Map originToFlutterId
androidx.window.R$styleable: int SplitPairRule_splitMinSmallestWidth
androidx.window.embedding.MatcherUtils: java.lang.String sMatchersTag
io.flutter.plugin.platform.SingleViewPresentation: int viewId
androidx.window.layout.WindowMetricsCalculatorCompat: androidx.window.layout.WindowMetricsCalculatorCompat INSTANCE
io.flutter.view.AccessibilityViewEmbedder: java.util.Map embeddedViewToDisplayBounds
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: android.app.Activity activity
io.flutter.embedding.engine.FlutterJNI: float displayHeight
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean animating
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: java.util.concurrent.locks.ReentrantLock lock
com.google.android.exoplayer2.source.hls.HlsTrackMetadataEntry$VariantInfo: android.os.Parcelable$Creator CREATOR
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int indexInArray
androidx.window.core.Version: int patch
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: android.app.Activity $activity
io.flutter.view.AccessibilityViewEmbedder: android.util.SparseArray flutterIdToOrigin
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_PAUSE
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$InsetsListener insetsListener
com.google.android.exoplayer2.metadata.mp4.SlowMotionData: android.os.Parcelable$Creator CREATOR
kotlin.coroutines.jvm.internal.BaseContinuationImpl: kotlin.coroutines.Continuation completion
androidx.window.layout.SidecarCompat$DistinctElementCallback: androidx.window.layout.ExtensionInterfaceCompat$ExtensionCallbackInterface callbackInterface
androidx.window.embedding.ExtensionEmbeddingBackend: java.util.concurrent.CopyOnWriteArrayList splitChangeCallbacks
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: int deferredInsetTypes
androidx.window.layout.WindowMetricsCalculator: androidx.window.layout.WindowMetricsCalculator$Companion Companion
androidx.window.layout.FoldingFeature$Orientation: java.lang.String description
androidx.window.layout.FoldingFeature$OcclusionType: androidx.window.layout.FoldingFeature$OcclusionType NONE
androidx.window.R$styleable: int SplitPlaceholderRule_splitMinSmallestWidth
androidx.window.embedding.MatcherUtils: boolean sDebugMatchers
io.flutter.plugin.platform.SingleViewPresentation: boolean startFocused
androidx.window.embedding.SplitPlaceholderRule: android.content.Intent placeholderIntent
androidx.window.embedding.ExtensionEmbeddingBackend: androidx.window.embedding.ExtensionEmbeddingBackend$EmbeddingCallbackImpl splitInfoEmbeddingCallback
androidx.window.layout.HardwareFoldingFeature$Type: androidx.window.layout.HardwareFoldingFeature$Type HINGE
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int workerCtl
androidx.window.layout.FoldingFeature$OcclusionType: androidx.window.layout.FoldingFeature$OcclusionType$Companion Companion
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_RESUME
io.flutter.view.FlutterCallbackInformation: java.lang.String callbackClassName
kotlin.coroutines.jvm.internal.SuspendLambda: int arity
androidx.window.embedding.ActivityFilter: java.lang.String intentAction
androidx.window.R$styleable: int[] ActivityFilter
com.google.android.exoplayer2.metadata.flac.VorbisComment: android.os.Parcelable$Creator CREATOR
androidx.window.core.Bounds: int left
kotlinx.coroutines.scheduling.CoroutineScheduler: long parkedWorkersStack
kotlinx.coroutines.scheduling.WorkQueue: int blockingTasksInBuffer
com.google.android.exoplayer2.metadata.scte35.SpliceScheduleCommand: android.os.Parcelable$Creator CREATOR
androidx.window.embedding.SplitInfo: float splitRatio
androidx.window.layout.WindowInfoTrackerImpl: androidx.window.layout.WindowBackend windowBackend
androidx.window.layout.ExtensionWindowLayoutInfoBackend: java.util.Map activityToListeners
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: androidx.window.layout.WindowInfoTrackerImpl this$0
kotlin.coroutines.jvm.internal.ContinuationImpl: kotlin.coroutines.Continuation intercepted
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: java.lang.Object L$0
androidx.window.R$styleable: int SplitPairRule_finishPrimaryWithSecondary
androidx.window.R$id: int ltr
io.flutter.plugin.platform.SingleViewPresentation: android.content.Context outerContext
io.flutter.plugin.platform.SingleViewPresentation: io.flutter.plugin.platform.AccessibilityEventsDelegate accessibilityEventsDelegate
com.google.android.exoplayer2.metadata.id3.MlltFrame: android.os.Parcelable$Creator CREATOR
com.google.android.exoplayer2.metadata.id3.GeobFrame: android.os.Parcelable$Creator CREATOR
io.flutter.view.FlutterCallbackInformation: java.lang.String callbackName
androidx.window.core.Bounds: int top
kotlin.jvm.internal.CallableReference: java.lang.Class owner
androidx.window.layout.SidecarCompat: java.lang.String TAG
androidx.window.embedding.SplitController: java.util.concurrent.locks.ReentrantLock globalLock
androidx.window.layout.DisplayCompatHelperApi28: androidx.window.layout.DisplayCompatHelperApi28 INSTANCE
androidx.window.R$styleable: int[] ActivityRule
androidx.window.layout.WindowMetricsCalculator$Companion: kotlin.jvm.functions.Function1 decorator
androidx.window.layout.HardwareFoldingFeature: androidx.window.layout.HardwareFoldingFeature$Type type
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: androidx.core.util.Consumer $consumer
io.flutter.plugin.platform.SingleViewPresentation: io.flutter.plugin.platform.SingleViewPresentation$PresentationState state
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_CREATE
io.flutter.embedding.engine.FlutterJNI: java.lang.String TAG
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$ImeVisibleListener imeVisibleListener
kotlinx.coroutines.internal.ThreadSafeHeap: int _size
kotlinx.coroutines.CommonPool: java.util.concurrent.Executor pool
androidx.window.layout.WindowMetricsCalculatorCompat: java.lang.String TAG
com.google.android.exoplayer2.drm.DrmInitData$SchemeData: android.os.Parcelable$Creator CREATOR
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_DESTROY
kotlinx.coroutines.scheduling.CoroutineScheduler: long controlState
androidx.window.layout.HardwareFoldingFeature$Type: androidx.window.layout.HardwareFoldingFeature$Type$Companion Companion
io.flutter.embedding.engine.FlutterJNI: boolean initCalled
androidx.window.embedding.SplitInfo: androidx.window.embedding.ActivityStack secondaryActivityStack
androidx.window.layout.SidecarCompat$DistinctElementCallback: java.util.WeakHashMap activityWindowLayoutInfo
androidx.window.R$id: int locale
androidx.window.embedding.ExtensionEmbeddingBackend$EmbeddingCallbackImpl: androidx.window.embedding.ExtensionEmbeddingBackend this$0
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: java.util.concurrent.locks.ReentrantLock multicastConsumerLock
androidx.window.embedding.EmbeddingTranslatingCallback: androidx.window.embedding.EmbeddingInterfaceCompat$EmbeddingCallbackInterface callback
androidx.window.core.Version: kotlin.Lazy bigInteger$delegate
kotlinx.coroutines.EventLoopImplBase: int _isCompleted
androidx.window.R$attr: int splitRatio
com.google.android.exoplayer2.metadata.mp4.MdtaMetadataEntry: android.os.Parcelable$Creator CREATOR
androidx.window.layout.HardwareFoldingFeature: androidx.window.layout.HardwareFoldingFeature$Companion Companion
androidx.window.embedding.SplitInfo: androidx.window.embedding.ActivityStack primaryActivityStack
androidx.window.layout.WindowInfoTrackerImpl: androidx.window.layout.WindowMetricsCalculator windowMetricsCalculator
androidx.window.embedding.EmbeddingTranslatingCallback: androidx.window.embedding.EmbeddingAdapter adapter
com.google.android.exoplayer2.metadata.icy.IcyHeaders: android.os.Parcelable$Creator CREATOR
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: androidx.window.layout.WindowLayoutInfo lastInfo
androidx.window.embedding.SplitRule$Api30Impl: androidx.window.embedding.SplitRule$Api30Impl INSTANCE
androidx.window.layout.ExtensionWindowLayoutInfoBackend: java.util.Map listenerToActivity
androidx.window.core.Version: int minor
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: java.util.List mutators
androidx.window.layout.HardwareFoldingFeature: androidx.window.layout.FoldingFeature$State state
kotlinx.coroutines.DefaultExecutor: int debugStatus
androidx.window.layout.ActivityCompatHelperApi24: androidx.window.layout.ActivityCompatHelperApi24 INSTANCE
androidx.window.R$attr: int splitMinSmallestWidth
androidx.window.layout.FoldingFeature$Orientation: androidx.window.layout.FoldingFeature$Orientation$Companion Companion
androidx.window.layout.FoldingFeature$OcclusionType: androidx.window.layout.FoldingFeature$OcclusionType FULL
kotlinx.coroutines.internal.LockFreeTaskQueue: java.lang.Object _cur
androidx.window.R$attr: int primaryActivityName
kotlinx.coroutines.android.HandlerContext: kotlinx.coroutines.android.HandlerContext _immediate
io.flutter.embedding.engine.FlutterOverlaySurface: int id
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_START
io.flutter.embedding.engine.FlutterJNI: java.util.concurrent.locks.ReentrantReadWriteLock shellHolderLock
com.google.android.exoplayer2.metadata.scte35.SpliceInsertCommand: android.os.Parcelable$Creator CREATOR
androidx.window.R$attr: int splitLayoutDirection
com.google.android.exoplayer2.metadata.emsg.EventMessage: android.os.Parcelable$Creator CREATOR
androidx.window.embedding.MatcherUtils: androidx.window.embedding.MatcherUtils INSTANCE
com.google.android.exoplayer2.metadata.dvbsi.AppInfoTable: android.os.Parcelable$Creator CREATOR
com.google.android.exoplayer2.source.hls.HlsTrackMetadataEntry: android.os.Parcelable$Creator CREATOR
com.google.android.exoplayer2.metadata.icy.IcyInfo: android.os.Parcelable$Creator CREATOR
androidx.window.embedding.SplitRule: int minWidth
io.flutter.embedding.engine.plugins.lifecycle.HiddenLifecycleReference: androidx.lifecycle.Lifecycle lifecycle
androidx.window.core.Version: androidx.window.core.Version UNKNOWN
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: android.app.Activity activity
androidx.window.embedding.SplitController: androidx.window.embedding.SplitController$Companion Companion
androidx.window.embedding.ActivityStack: boolean isEmpty
androidx.window.embedding.SplitPlaceholderRule: java.util.Set filters
io.flutter.embedding.engine.FlutterJNI: java.lang.Long nativeShellHolderId
kotlinx.coroutines.EventLoopImplBase: java.lang.Object _queue
com.google.android.exoplayer2.metadata.Metadata: android.os.Parcelable$Creator CREATOR
com.google.android.exoplayer2.metadata.id3.InternalFrame: android.os.Parcelable$Creator CREATOR
androidx.window.layout.FoldingFeature$State: androidx.window.layout.FoldingFeature$State$Companion Companion
androidx.window.layout.HardwareFoldingFeature: androidx.window.core.Bounds featureBounds
androidx.window.layout.WindowMetricsCalculator$Companion$reset$1: androidx.window.layout.WindowMetricsCalculator$Companion$reset$1 INSTANCE
kotlin.jvm.internal.CallableReference: java.lang.String signature
com.google.android.exoplayer2.metadata.id3.BinaryFrame: android.os.Parcelable$Creator CREATOR
kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object _state
io.flutter.embedding.engine.FlutterOverlaySurface: android.view.Surface surface
androidx.window.layout.ExtensionWindowLayoutInfoBackend: androidx.window.extensions.layout.WindowLayoutComponent component
io.flutter.embedding.engine.FlutterJNI: io.flutter.plugin.localization.LocalizationPlugin localizationPlugin
io.flutter.view.AccessibilityViewEmbedder: io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors reflectionAccessors
androidx.window.layout.SidecarWindowBackend: boolean DEBUG
androidx.window.layout.ExtensionsWindowLayoutInfoAdapter: androidx.window.layout.ExtensionsWindowLayoutInfoAdapter INSTANCE
kotlinx.coroutines.JobSupport$Finishing: int _isCompleting
androidx.window.layout.HardwareFoldingFeature$Type: java.lang.String description
androidx.window.layout.SidecarCompat: androidx.window.layout.SidecarCompat$Companion Companion
kotlinx.coroutines.scheduling.WorkQueue: java.lang.Object lastScheduledTask
com.google.android.exoplayer2.metadata.id3.PrivFrame: android.os.Parcelable$Creator CREATOR
androidx.window.embedding.ExtensionEmbeddingBackend: androidx.window.embedding.EmbeddingInterfaceCompat embeddingExtension
androidx.window.R$attr: int placeholderActivityName
io.flutter.embedding.engine.FlutterJNI: java.util.Set flutterUiDisplayListeners
com.google.android.exoplayer2.metadata.mp4.MotionPhotoMetadata: android.os.Parcelable$Creator CREATOR
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: int label
androidx.window.layout.SidecarWindowBackend: java.util.concurrent.locks.ReentrantLock globalLock
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.WindowInsets lastWindowInsets
androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper: java.util.concurrent.Executor executor
androidx.window.embedding.SplitPairFilter: android.content.ComponentName primaryActivityName
androidx.window.embedding.SplitController: boolean sDebug
kotlinx.coroutines.channels.AbstractSendChannel: java.lang.Object onCloseHandler
androidx.window.layout.SidecarCompat$FirstAttachAdapter: java.lang.ref.WeakReference activityWeakReference
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback: io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback this$0
androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper: androidx.core.util.Consumer callback
kotlinx.coroutines.JobSupport$Finishing: java.lang.Object _rootCause
androidx.window.layout.SidecarCompat$registerConfigurationChangeListener$configChangeObserver$1: android.app.Activity $activity
androidx.window.layout.SidecarWindowBackend: androidx.window.layout.SidecarWindowBackend globalInstance
kotlin.jvm.internal.CallableReference: boolean isTopLevel
kotlinx.coroutines.DefaultExecutor: java.lang.Thread _thread
androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper: java.util.List lastValue
kotlinx.coroutines.internal.LockFreeTaskQueueCore: java.lang.Object _next
androidx.window.R$attr: int clearTop
io.flutter.embedding.android.FlutterSplashView$SavedState: android.os.Bundle splashScreenState
androidx.window.layout.WindowMetricsCalculator$Companion: androidx.window.layout.WindowMetricsCalculator$Companion $$INSTANCE
com.google.android.exoplayer2.metadata.id3.ApicFrame: android.os.Parcelable$Creator CREATOR
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: java.util.concurrent.Executor executor
androidx.window.layout.FoldingFeature$State: androidx.window.layout.FoldingFeature$State HALF_OPENED
androidx.window.R$styleable: int SplitPlaceholderRule_placeholderActivityName
androidx.window.layout.SidecarCompat$FirstAttachAdapter: androidx.window.layout.SidecarCompat sidecarCompat
com.google.android.exoplayer2.metadata.id3.ChapterTocFrame: android.os.Parcelable$Creator CREATOR
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: androidx.window.layout.WindowInfoTracker tracker
kotlinx.coroutines.scheduling.LimitingDispatcher: int inFlightTasks
androidx.window.core.Bounds: int right
kotlinx.coroutines.CancellableContinuationImpl: int _decision
androidx.window.embedding.SplitPairRule: boolean finishSecondaryWithPrimary
androidx.window.layout.SidecarCompat: java.util.Map componentCallbackMap
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_ANY
androidx.window.embedding.ExtensionEmbeddingBackend: java.util.concurrent.locks.ReentrantLock globalLock
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: java.util.List finalClippingPaths
androidx.window.layout.WindowInfoTracker$Companion: androidx.window.layout.WindowInfoTrackerDecorator decorator
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.dart.PlatformMessageHandler platformMessageHandler
kotlinx.coroutines.channels.ArrayChannel: int size
com.google.android.exoplayer2.metadata.flac.PictureFrame: android.os.Parcelable$Creator CREATOR
androidx.window.embedding.SplitPairRule: java.util.Set filters
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_STOP
androidx.window.core.Version: androidx.window.core.Version VERSION_0_1
androidx.window.embedding.EmbeddingCompat: boolean DEBUG
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: java.lang.Runnable onFrameConsumed
io.flutter.plugin.platform.SingleViewPresentation: io.flutter.plugin.platform.SingleViewPresentation$AccessibilityDelegatingFrameLayout rootView
androidx.window.embedding.SplitController: androidx.window.embedding.EmbeddingBackend embeddingBackend
androidx.window.R$attr: int activityAction
androidx.window.layout.WindowInfoTracker$Companion: boolean DEBUG
androidx.window.embedding.ActivityRule: boolean alwaysExpand
androidx.window.layout.WindowLayoutInfo: java.util.List displayFeatures
io.flutter.view.AccessibilityViewEmbedder: java.lang.String TAG
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.View view
io.flutter.embedding.android.FlutterSplashView$SavedState: java.lang.String previousCompletedSplashIsolate
androidx.window.embedding.EmbeddingCompat: androidx.window.embedding.EmbeddingCompat$Companion Companion
androidx.window.embedding.SplitPairRule: boolean clearTop
androidx.window.R$styleable: int SplitPairFilter_secondaryActivityName
androidx.window.embedding.EmbeddingCompat: java.lang.String TAG
androidx.window.layout.WindowInfoTracker$Companion: java.lang.String TAG
androidx.window.embedding.ActivityStack: java.util.List activities
com.google.android.exoplayer2.offline.StreamKey: android.os.Parcelable$Creator CREATOR
androidx.window.layout.SidecarWindowBackend: androidx.window.layout.SidecarWindowBackend$Companion Companion
kotlin.jvm.internal.CallableReference: java.lang.Object receiver
androidx.window.embedding.SplitRule: int layoutDirection
androidx.window.R$attr: int splitMinWidth
androidx.versionedparcelable.ParcelImpl: android.os.Parcelable$Creator CREATOR
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: java.util.Set registeredListeners
kotlinx.coroutines.DispatchedCoroutine: int _decision
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: boolean released
kotlinx.coroutines.internal.AtomicOp: java.lang.Object _consensus
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: boolean attached
androidx.window.embedding.SplitController: androidx.window.embedding.SplitController globalInstance
androidx.window.layout.DisplayCompatHelperApi17: androidx.window.layout.DisplayCompatHelperApi17 INSTANCE
kotlinx.coroutines.internal.LockFreeLinkedListNode: java.lang.Object _removedRef
androidx.window.R$styleable: int SplitPlaceholderRule_splitRatio
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: androidx.core.util.Consumer callback
androidx.window.layout.SidecarWindowBackend: androidx.window.layout.ExtensionInterfaceCompat windowExtension
io.flutter.plugins.GeneratedPluginRegistrant: java.lang.String TAG
androidx.window.R$attr: int finishPrimaryWithSecondary
androidx.window.embedding.SplitController: java.util.Set staticSplitRules
kotlinx.coroutines.android.AndroidExceptionPreHandler: java.lang.Object _preHandler
androidx.window.R$styleable: int SplitPairFilter_primaryActivityName
androidx.window.layout.SidecarCompat$DistinctSidecarElementCallback: java.util.WeakHashMap mActivityWindowLayoutInfo
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.FlutterJNI$AccessibilityDelegate accessibilityDelegate
com.google.android.exoplayer2.metadata.id3.CommentFrame: android.os.Parcelable$Creator CREATOR
androidx.window.layout.SidecarCompat$DistinctSidecarElementCallback: java.util.concurrent.locks.ReentrantLock lock
androidx.window.embedding.ExtensionEmbeddingBackend: java.lang.String TAG
androidx.window.R$attr: int finishSecondaryWithPrimary
androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper: android.app.Activity activity
androidx.window.embedding.ExtensionEmbeddingBackend: java.util.concurrent.CopyOnWriteArraySet splitRules
io.flutter.view.AccessibilityViewEmbedder: int nextFlutterId
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback animationCallback
androidx.window.R$attr: int alwaysExpand
androidx.window.layout.WindowInfoTracker$Companion: androidx.window.layout.WindowInfoTracker$Companion $$INSTANCE
androidx.window.core.Version: androidx.window.core.Version$Companion Companion
androidx.window.layout.HardwareFoldingFeature$Type: androidx.window.layout.HardwareFoldingFeature$Type FOLD
kotlin.jvm.internal.Lambda: int arity
androidx.window.R$styleable: int SplitPairRule_splitMinWidth
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: java.lang.Object L$1
kotlinx.coroutines.CancelledContinuation: int _resumed
io.flutter.embedding.engine.FlutterJNI: float displayDensity
androidx.window.R$styleable: int SplitPairRule_splitRatio
androidx.window.embedding.SplitRule: float splitRatio
com.google.android.exoplayer2.metadata.mp4.SmtaMetadataEntry: android.os.Parcelable$Creator CREATOR
androidx.window.embedding.EmbeddingCompat: androidx.window.embedding.EmbeddingAdapter adapter
androidx.window.layout.FoldingFeature$State: java.lang.String description
androidx.window.layout.SidecarCompat: androidx.window.layout.ExtensionInterfaceCompat$ExtensionCallbackInterface extensionCallback
androidx.window.layout.SidecarCompat$DistinctElementCallback: java.util.concurrent.locks.ReentrantLock lock
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.FlutterJNI$AsyncWaitForVsyncDelegate asyncWaitForVsyncDelegate
androidx.window.embedding.ExtensionEmbeddingBackend: androidx.window.embedding.ExtensionEmbeddingBackend$Companion Companion
androidx.window.layout.SidecarCompat$registerConfigurationChangeListener$configChangeObserver$1: androidx.window.layout.SidecarCompat this$0
androidx.window.layout.WindowMetricsCalculator$Companion$decorator$1: androidx.window.layout.WindowMetricsCalculator$Companion$decorator$1 INSTANCE
androidx.window.layout.SidecarWindowBackend: java.util.concurrent.CopyOnWriteArrayList windowLayoutChangeCallbacks
androidx.window.R$styleable: int SplitPairRule_clearTop
com.google.android.exoplayer2.metadata.id3.UrlLinkFrame: android.os.Parcelable$Creator CREATOR
androidx.window.core.Bounds: int bottom
io.flutter.embedding.engine.FlutterJNI: io.flutter.plugin.platform.PlatformViewsController platformViewsController
androidx.window.core.Version$bigInteger$2: androidx.window.core.Version this$0
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1$invokeSuspend$$inlined$collect$1: androidx.core.util.Consumer $consumer$inlined
kotlinx.coroutines.scheduling.WorkQueue: int consumerIndex
androidx.window.layout.SidecarAdapter: androidx.window.layout.SidecarAdapter$Companion Companion
io.flutter.view.FlutterCallbackInformation: java.lang.String callbackLibraryPath
io.flutter.plugin.platform.SingleViewPresentation: android.widget.FrameLayout container
androidx.window.core.Version: androidx.window.core.Version VERSION_1_0
androidx.window.layout.WindowInfoTrackerImpl: androidx.window.layout.WindowInfoTrackerImpl$Companion Companion
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: android.graphics.Matrix finalMatrix
kotlinx.coroutines.internal.LockFreeTaskQueueCore: long _state
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: java.lang.Object L$2
com.google.android.exoplayer2.metadata.mp4.SlowMotionData$Segment: android.os.Parcelable$Creator CREATOR
androidx.window.core.Version: java.lang.String VERSION_PATTERN_STRING
io.flutter.embedding.engine.FlutterJNI: android.os.Looper mainLooper
androidx.window.layout.SidecarCompat: androidx.window.layout.SidecarAdapter sidecarAdapter
com.google.android.exoplayer2.metadata.id3.TextInformationFrame: android.os.Parcelable$Creator CREATOR
androidx.window.R$styleable: int SplitPlaceholderRule_splitMinWidth
androidx.window.layout.SidecarCompat: java.util.Map windowListenerRegisteredContexts
kotlin.coroutines.jvm.internal.ContinuationImpl: kotlin.coroutines.CoroutineContext _context
kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart valueOf(java.lang.String)
androidx.window.embedding.EmbeddingCompat$Companion: EmbeddingCompat$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
androidx.window.embedding.SplitRuleParser: androidx.window.embedding.ActivityFilter parseActivityFilter(android.content.Context,android.content.res.XmlResourceParser)
kotlin.jvm.internal.FunctionReferenceImpl: FunctionReferenceImpl(int,kotlin.reflect.KDeclarationContainer,java.lang.String,java.lang.String)
androidx.window.embedding.ActivityStack: boolean equals(java.lang.Object)
io.flutter.embedding.engine.FlutterJNI: void onFirstFrame()
androidx.window.embedding.EmptyEmbeddingComponent: EmptyEmbeddingComponent()
io.flutter.embedding.android.FlutterTextureView: io.flutter.embedding.engine.renderer.FlutterRenderer getAttachedRenderer()
io.flutter.embedding.engine.FlutterJNI: void setSemanticsEnabled(boolean)
com.google.android.exoplayer2.metadata.id3.ChapterFrame: void writeToParcel(android.os.Parcel,int)
io.flutter.embedding.engine.FlutterJNI: long performNativeAttach(io.flutter.embedding.engine.FlutterJNI)
com.google.android.exoplayer2.source.ads.AdPlaybackState$AdGroup: int hashCode()
io.flutter.embedding.engine.FlutterOverlaySurface: int getId()
io.flutter.embedding.engine.FlutterJNI: void onDisplayPlatformView(int,int,int,int,int,int,int,io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack)
androidx.window.layout.SidecarWindowBackend$Companion: SidecarWindowBackend$Companion()
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: void pushClipRRect(int,int,int,int,float[])
androidx.window.embedding.SplitPlaceholderRule: androidx.window.embedding.SplitPlaceholderRule plus$window_release(androidx.window.embedding.ActivityFilter)
androidx.core.graphics.drawable.IconCompat: IconCompat()
androidx.window.layout.SidecarCompat: SidecarCompat(android.content.Context)
io.flutter.embedding.engine.FlutterJNI: void prefetchDefaultFontManager()
kotlin.coroutines.AbstractCoroutineContextElement: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)
androidx.window.layout.WindowMetrics: int hashCode()
androidx.window.layout.SidecarWindowBackend$ExtensionListenerImpl: void onWindowLayoutChanged(android.app.Activity,androidx.window.layout.WindowLayoutInfo)
androidx.core.view.ViewCompat$Api21Impl: android.graphics.PorterDuff$Mode getBackgroundTintMode(android.view.View)
com.google.android.exoplayer2.source.dash.DashMediaSource$Factory: DashMediaSource$Factory(com.google.android.exoplayer2.upstream.DataSource$Factory)
androidx.core.view.ViewCompat$Api16Impl: void removeOnGlobalLayoutListener(android.view.ViewTreeObserver,android.view.ViewTreeObserver$OnGlobalLayoutListener)
com.google.android.exoplayer2.video.VideoFrameReleaseHelper$Api30: void setSurfaceFrameRate(android.view.Surface,float)
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.FlutterJNI spawn(java.lang.String,java.lang.String,java.lang.String,java.util.List)
androidx.collection.SimpleArrayMap: void freeArrays(int[],java.lang.Object[],int)
com.google.android.exoplayer2.extractor.ts.DvbSubtitleReader: void createTracks(com.google.android.exoplayer2.extractor.ExtractorOutput,com.google.android.exoplayer2.extractor.ts.TsPayloadReader$TrackIdGenerator)
androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper: androidx.core.util.Consumer getCallback()
com.google.android.exoplayer2.audio.MpegAudioUtil: java.lang.String[] access$100()
androidx.window.embedding.ActivityRule: java.util.Set getFilters()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$ImeVisibleListener getImeVisibleListener()
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: kotlinx.coroutines.flow.Flow windowLayoutInfo(android.app.Activity)
androidx.collection.SimpleArrayMap: int hashCode()
androidx.window.embedding.EmbeddingCompat$Companion: java.lang.Integer getExtensionApiLevel()
com.google.android.exoplayer2.ExoPlayerImplInternal: void doSomeWork()
androidx.window.embedding.SplitInfo: java.lang.String toString()
androidx.core.view.ViewCompat$Api28Impl: void removeOnUnhandledKeyEventListener(android.view.View,androidx.core.view.ViewCompat$OnUnhandledKeyEventListenerCompat)
com.google.android.exoplayer2.source.CompositeSequenceableLoader: boolean isLoading()
com.google.android.exoplayer2.upstream.DefaultAllocator: DefaultAllocator(boolean,int,int)
com.google.android.exoplayer2.extractor.ts.UserDataReader: void createTracks(com.google.android.exoplayer2.extractor.ExtractorOutput,com.google.android.exoplayer2.extractor.ts.TsPayloadReader$TrackIdGenerator)
com.google.android.exoplayer2.util.Util: java.lang.String maybeReplaceLegacyLanguageTags(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void setAccessibilityDelegate(io.flutter.embedding.engine.FlutterJNI$AccessibilityDelegate)
android.support.v4.app.RemoteActionCompatParcelizer: RemoteActionCompatParcelizer()
androidx.window.layout.SidecarCompat$TranslatingCallback: SidecarCompat$TranslatingCallback(androidx.window.layout.SidecarCompat)
androidx.window.R$styleable: R$styleable()
androidx.window.layout.WindowMetricsCalculator$Companion$overrideDecorator$1: java.lang.Object invoke(java.lang.Object)
com.google.android.exoplayer2.source.smoothstreaming.manifest.SsManifest: com.google.android.exoplayer2.source.smoothstreaming.manifest.SsManifest copy(java.util.List)
com.google.android.exoplayer2.extractor.FlacMetadataReader: java.util.List readVorbisCommentMetadataBlock(com.google.android.exoplayer2.extractor.ExtractorInput,int)
io.flutter.view.AccessibilityViewEmbedder: void addChildrenToFlutterNode(android.view.accessibility.AccessibilityNodeInfo,android.view.View,android.view.accessibility.AccessibilityNodeInfo)
com.google.android.exoplayer2.metadata.id3.ChapterTocFrame: boolean equals(java.lang.Object)
kotlinx.coroutines.internal.ThreadSafeHeap: kotlinx.coroutines.internal.ThreadSafeHeapNode removeAtImpl(int)
androidx.window.embedding.SplitInfo: androidx.window.embedding.ActivityStack getSecondaryActivityStack()
androidx.window.embedding.ExtensionEmbeddingBackend$EmbeddingCallbackImpl: void setLastInfo(java.util.List)
io.flutter.embedding.engine.FlutterJNI: void onRenderingStopped()
androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getInsetsForType(int,boolean)
com.google.android.exoplayer2.metadata.Metadata: java.lang.String toString()
com.google.android.exoplayer2.audio.DefaultAudioSink$Configuration: com.google.android.exoplayer2.audio.DefaultAudioSink$Configuration copyWithBufferSize(int)
kotlin.jvm.internal.FunctionReference: kotlin.reflect.KFunction getReflected()
com.google.common.collect.RegularImmutableMap$EntrySet: java.lang.Object[] access$100(com.google.common.collect.RegularImmutableMap$EntrySet)
androidx.window.layout.SidecarCompat$FirstAttachAdapter: void onViewDetachedFromWindow(android.view.View)
kotlinx.coroutines.android.AndroidDispatcherFactory: kotlinx.coroutines.MainCoroutineDispatcher createDispatcher(java.util.List)
com.google.android.exoplayer2.source.smoothstreaming.manifest.SsManifest$StreamElement: android.net.Uri buildRequestUri(int,int)
androidx.window.embedding.SplitPairRule: SplitPairRule(java.util.Set,boolean,boolean,boolean,int,int,float,int)
androidx.window.layout.WindowInfoTrackerImpl$Companion: WindowInfoTrackerImpl$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
io.flutter.embedding.android.FlutterImageView: android.media.ImageReader getImageReader()
kotlin.jvm.internal.FunctionReference: boolean isExternal()
kotlin.jvm.internal.CallableReference: CallableReference()
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: java.lang.Object invokeSuspend(java.lang.Object)
com.google.android.exoplayer2.source.TrackGroup: int hashCode()
androidx.core.view.ViewCompat$Api19Impl: void setContentChangeTypes(android.view.accessibility.AccessibilityEvent,int)
com.google.android.exoplayer2.source.hls.HlsSampleStreamWrapper: boolean seekToUs(long,boolean)
io.flutter.embedding.engine.FlutterJNI: void cleanupMessageData(long)
com.google.android.exoplayer2.audio.DefaultAudioSink$Api23: void setPreferredDeviceOnAudioTrack(android.media.AudioTrack,com.google.android.exoplayer2.audio.DefaultAudioSink$AudioDeviceInfoApi23)
androidx.window.embedding.SplitPairRule: SplitPairRule(java.util.Set,boolean,boolean,boolean,int,int,float,int,int,kotlin.jvm.internal.DefaultConstructorMarker)
io.flutter.embedding.engine.FlutterJNI: void registerTexture(long,io.flutter.embedding.engine.renderer.SurfaceTextureWrapper)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean access$302(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback,boolean)
com.google.android.exoplayer2.metadata.Metadata: com.google.android.exoplayer2.metadata.Metadata copyWithAppendedEntriesFrom(com.google.android.exoplayer2.metadata.Metadata)
com.google.android.exoplayer2.MediaPeriodHolder: void disassociateNoSampleRenderersWithEmptySampleStream(com.google.android.exoplayer2.source.SampleStream[])
com.google.android.exoplayer2.source.chunk.ChunkSampleStream: void resetSampleQueues()
com.google.android.exoplayer2.source.hls.HlsSampleStreamWrapper: void initMediaChunkLoad(com.google.android.exoplayer2.source.hls.HlsMediaChunk)
androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper: void accept$lambda-1(androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper,java.util.List)
com.google.android.exoplayer2.source.chunk.ChunkSampleStream: void discardBuffer(long,boolean)
androidx.window.layout.WindowMetricsCalculator$Companion$overrideDecorator$1: WindowMetricsCalculator$Companion$overrideDecorator$1(java.lang.Object)
com.google.common.base.Function: boolean equals(java.lang.Object)
com.google.android.exoplayer2.source.chunk.ChunkSampleStream: boolean haveReadFromMediaChunk(int)
androidx.window.layout.WindowInfoTracker$Companion: void reset()
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay valueOf(java.lang.String)
androidx.window.embedding.ExtensionEmbeddingBackend$EmbeddingCallbackImpl: void onSplitInfoChanged(java.util.List)
io.flutter.view.AccessibilityViewEmbedder: boolean requestSendAccessibilityEvent(android.view.View,android.view.View,android.view.accessibility.AccessibilityEvent)
androidx.core.view.ViewCompat$Api16Impl: boolean hasOverlappingRendering(android.view.View)
kotlinx.coroutines.internal.ThreadState: void append(kotlinx.coroutines.ThreadContextElement,java.lang.Object)
io.flutter.embedding.engine.systemchannels.LifecycleChannel$AppLifecycleState: io.flutter.embedding.engine.systemchannels.LifecycleChannel$AppLifecycleState[] values()
androidx.window.core.Version$bigInteger$2: java.lang.Object invoke()
androidx.window.embedding.SplitController: java.util.concurrent.locks.ReentrantLock access$getGlobalLock$cp()
androidx.core.view.ViewCompat$Api21Impl: boolean isImportantForAccessibility(android.view.View)
com.google.android.exoplayer2.text.subrip.SubripSubtitle: java.util.List getCues(long)
io.flutter.embedding.android.FlutterSplashView$SavedState: FlutterSplashView$SavedState(android.os.Parcelable)
androidx.window.layout.SidecarCompat: void unregisterComponentCallback(android.app.Activity)
io.flutter.util.ViewUtils$$InternalSyntheticLambda$1$c0aa1774cd8831658692c914ac238b83368f5d4eb3adf605ed1d77e75423b804$0: boolean run(android.view.View)
com.google.android.exoplayer2.MediaPeriodHolder: long applyTrackSelection(com.google.android.exoplayer2.trackselection.TrackSelectorResult,long,boolean)
androidx.window.embedding.SplitPlaceholderRule: boolean equals(java.lang.Object)
androidx.window.layout.WindowMetricsCalculator$Companion: void reset()
androidx.window.layout.FoldingFeature: boolean isSeparating()
androidx.window.core.Version$Companion: androidx.window.core.Version getVERSION_0_1()
androidx.window.layout.WindowInfoTracker$Companion: WindowInfoTracker$Companion()
kotlin.jvm.internal.CollectionToArray: java.lang.Object[] toArray(java.util.Collection)
com.google.android.exoplayer2.source.chunk.ChunkSampleStream: com.google.android.exoplayer2.source.chunk.ChunkSampleStream$EmbeddedSampleStream selectEmbeddedTrack(long,int)
io.flutter.embedding.engine.FlutterJNI: void nativePrefetchDefaultFontManager()
androidx.window.layout.SidecarCompat$Companion: SidecarCompat$Companion()
io.flutter.embedding.engine.FlutterOverlaySurface: android.view.Surface getSurface()
io.flutter.plugin.editing.TextInputPlugin: void onProvideAutofillVirtualStructure(android.view.ViewStructure,int)
com.google.android.exoplayer2.BaseRenderer: com.google.android.exoplayer2.Format[] getStreamFormats()
com.google.android.exoplayer2.source.chunk.BaseMediaChunkOutput: com.google.android.exoplayer2.extractor.TrackOutput track(int,int)
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: WindowInfoTrackerCallbackAdapter(androidx.window.layout.WindowInfoTracker)
androidx.window.embedding.SplitRuleParser: androidx.window.embedding.ActivityRule parseSplitActivityRule(android.content.Context,android.content.res.XmlResourceParser)
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: void updateTexImage()
com.google.common.collect.AbstractIterator$State: com.google.common.collect.AbstractIterator$State[] values()
androidx.window.embedding.SplitRule: int getMinWidth()
androidx.window.layout.WindowMetricsCalculator$Companion: void overrideDecorator(androidx.window.layout.WindowMetricsCalculatorDecorator)
com.google.android.exoplayer2.extractor.ts.DvbSubtitleReader: void consume(com.google.android.exoplayer2.util.ParsableByteArray)
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: void accept$lambda-0(androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper,androidx.window.layout.WindowLayoutInfo)
androidx.core.view.ViewCompat$Api21Impl: boolean startNestedScroll(android.view.View,int)
io.flutter.embedding.engine.FlutterJNI: void invokePlatformMessageResponseCallback(int,java.nio.ByteBuffer,int)
io.flutter.embedding.engine.FlutterJNI: boolean isCodePointVariantSelector(int)
androidx.window.core.Bounds: int getBottom()
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: java.util.List getMutators()
androidx.window.layout.WindowMetricsCalculator$Companion: androidx.window.layout.WindowMetricsCalculator getOrCreate()
com.google.android.exoplayer2.video.spherical.SphericalGLSurfaceView: void setDefaultStereoMode(int)
androidx.window.layout.SidecarCompat$DistinctSidecarElementCallback: void onWindowLayoutChanged(android.os.IBinder,androidx.window.sidecar.SidecarWindowLayoutInfo)
com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void discardBuffer(long,boolean)
com.google.android.exoplayer2.source.hls.HlsChunkSource: int getChunkPublicationState(com.google.android.exoplayer2.source.hls.HlsMediaChunk)
io.flutter.view.AccessibilityViewEmbedder: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int)
androidx.window.embedding.SplitInfo: boolean equals(java.lang.Object)
androidx.window.embedding.SplitPairRule: boolean getFinishPrimaryWithSecondary()
androidx.window.layout.SidecarWindowBackend: java.util.concurrent.locks.ReentrantLock access$getGlobalLock$cp()
kotlinx.coroutines.android.AndroidExceptionPreHandler: void handleException(kotlin.coroutines.CoroutineContext,java.lang.Throwable)
com.google.android.exoplayer2.source.dash.DefaultDashChunkSource: void release()
kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState[] values()
com.google.android.exoplayer2.audio.DefaultAudioSink$DefaultAudioProcessorChain: com.google.android.exoplayer2.audio.AudioProcessor[] getAudioProcessors()
kotlin.jvm.internal.Lambda: Lambda(int)
androidx.window.embedding.SplitInfo: float getSplitRatio()
kotlinx.coroutines.channels.BufferOverflow: kotlinx.coroutines.channels.BufferOverflow[] values()
com.google.android.exoplayer2.ExoPlayerImplInternal: void reselectTracksInternal()
kotlin.jvm.internal.FunctionReference: FunctionReference(int,java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,int)
androidx.window.layout.HardwareFoldingFeature$Type: androidx.window.layout.HardwareFoldingFeature$Type access$getHINGE$cp()
com.google.android.exoplayer2.source.hls.HlsSampleStreamWrapper: int skipData(int,long)
com.google.common.collect.AbstractIterator$State: com.google.common.collect.AbstractIterator$State valueOf(java.lang.String)
androidx.window.embedding.ActivityStack: int hashCode()
io.flutter.embedding.engine.FlutterJNI: boolean isCodePointEmojiModifier(int)
androidx.window.embedding.ExtensionEmbeddingBackend: boolean isSplitSupported()
androidx.window.embedding.EmbeddingAdapter: java.util.List translate(java.util.List)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.View access$400(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
io.flutter.embedding.android.KeyboardManager: java.util.Map getKeyboardState()
com.google.android.exoplayer2.audio.DefaultAudioSink$Api31: void setLogSessionIdOnAudioTrack(android.media.AudioTrack,com.google.android.exoplayer2.analytics.PlayerId)
androidx.window.layout.WindowLayoutInfo: boolean equals(java.lang.Object)
androidx.window.embedding.ExtensionEmbeddingBackend$Companion: ExtensionEmbeddingBackend$Companion()
kotlin.jvm.internal.CallableReference: java.lang.String getName()
io.flutter.view.AccessibilityViewEmbedder: void copyAccessibilityFields(android.view.accessibility.AccessibilityNodeInfo,android.view.accessibility.AccessibilityNodeInfo)
com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void startLoading()
androidx.window.layout.EmptyDecorator: EmptyDecorator()
androidx.window.layout.ExtensionInterfaceCompat: boolean validateExtensionInterface()
androidx.window.layout.WindowInfoTracker$Companion: androidx.window.layout.WindowInfoTracker getOrCreate(android.content.Context)
androidx.window.embedding.ExtensionEmbeddingBackend: void getSplitChangeCallbacks$annotations()
androidx.core.view.ViewCompat$Api20Impl: android.view.WindowInsets onApplyWindowInsets(android.view.View,android.view.WindowInsets)
androidx.core.view.ViewCompat$Api28Impl: java.lang.Object requireViewById(android.view.View,int)
com.google.android.exoplayer2.trackselection.TrackSelectorResult: boolean isRendererEnabled(int)
io.flutter.embedding.android.FlutterView: io.flutter.plugin.common.BinaryMessenger getBinaryMessenger()
com.google.android.exoplayer2.drm.DrmInitData: int hashCode()
com.google.android.exoplayer2.source.hls.HlsSampleStreamWrapper: com.google.android.exoplayer2.source.hls.HlsMediaChunk discardUpstreamMediaChunksFromIndex(int)
androidx.core.view.ViewCompat$Api28Impl: java.lang.CharSequence getAccessibilityPaneTitle(android.view.View)
androidx.window.layout.SidecarWindowBackend: java.util.concurrent.CopyOnWriteArrayList getWindowLayoutChangeCallbacks()
androidx.core.view.ViewCompat$Api16Impl: void setBackground(android.view.View,android.graphics.drawable.Drawable)
androidx.window.embedding.EmbeddingAdapter: EmbeddingAdapter()
com.google.android.exoplayer2.source.hls.HlsSampleStreamWrapper: void maybeThrowError(int)
io.flutter.view.AccessibilityBridge$StringAttributeType: io.flutter.view.AccessibilityBridge$StringAttributeType[] values()
io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType: io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType[] values()
androidx.core.view.ViewCompat$Api28Impl: boolean isScreenReaderFocusable(android.view.View)
androidx.window.core.Version: int compareTo(androidx.window.core.Version)
kotlin.jvm.internal.CallableReference: boolean isOpen()
androidx.window.embedding.EmbeddingAdapter: java.util.function.Predicate translateActivityPredicates(java.util.Set)
com.google.android.exoplayer2.ExoPlayerImplInternal: boolean replaceStreamsOrDisableRendererForTransition()
androidx.window.layout.FoldingFeature: androidx.window.layout.FoldingFeature$Orientation getOrientation()
androidx.window.layout.WindowMetricsCalculator$Companion$decorator$1: java.lang.Object invoke(java.lang.Object)
androidx.window.embedding.ActivityStack: ActivityStack(java.util.List,boolean)
androidx.window.layout.ExtensionsWindowLayoutInfoAdapter: androidx.window.layout.FoldingFeature translate$window_release(android.app.Activity,androidx.window.extensions.layout.FoldingFeature)
io.flutter.embedding.engine.FlutterJNI: void asyncWaitForVsync(long)
androidx.core.view.ViewCompat$Api28Impl: void setAccessibilityHeading(android.view.View,boolean)
com.google.android.exoplayer2.source.chunk.ChunkSampleStream: void onLoaderReleased()
com.google.android.exoplayer2.upstream.FileDataSource$Api21: boolean isPermissionError(java.lang.Throwable)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: java.util.List getFinalClippingPaths()
kotlin.coroutines.jvm.internal.BaseContinuationImpl: kotlin.coroutines.Continuation getCompletion()
androidx.window.layout.HardwareFoldingFeature$Type$Companion: HardwareFoldingFeature$Type$Companion()
androidx.window.layout.SidecarCompat: void onWindowLayoutChangeListenerRemoved(android.app.Activity)
androidx.window.layout.HardwareFoldingFeature: HardwareFoldingFeature(androidx.window.core.Bounds,androidx.window.layout.HardwareFoldingFeature$Type,androidx.window.layout.FoldingFeature$State)
com.google.android.exoplayer2.audio.AudioAttributes$Api29: void setAllowedCapturePolicy(android.media.AudioAttributes$Builder,int)
androidx.window.layout.DisplayCompatHelperApi17: DisplayCompatHelperApi17()
androidx.window.embedding.SplitPairFilter: android.content.ComponentName getSecondaryActivityName()
androidx.window.embedding.EmbeddingCompat$Companion: boolean isEmbeddingAvailable()
kotlin.jvm.internal.CallableReference: kotlin.reflect.KCallable computeReflected()
io.flutter.embedding.engine.FlutterJNI: long nativeAttach(io.flutter.embedding.engine.FlutterJNI)
androidx.window.layout.SidecarWindowBackend: void access$setGlobalInstance$cp(androidx.window.layout.SidecarWindowBackend)
androidx.window.layout.SidecarCompat: void setExtensionCallback(androidx.window.layout.ExtensionInterfaceCompat$ExtensionCallbackInterface)
androidx.window.embedding.SplitController$Companion: androidx.window.embedding.SplitController getInstance()
io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType: io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType valueOf(java.lang.String)
androidx.window.layout.SidecarAdapter$Companion: int getRawSidecarDevicePosture(androidx.window.sidecar.SidecarDeviceState)
io.flutter.embedding.engine.FlutterOverlaySurface: FlutterOverlaySurface(int,android.view.Surface)
com.google.android.exoplayer2.MediaPeriodHolder: void disableTrackSelectionsInResult()
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)
androidx.window.layout.WindowMetricsCalculatorCompat: android.view.DisplayCutout getCutoutForDisplay(android.view.Display)
androidx.collection.SimpleArrayMap: java.lang.Object removeAt(int)
kotlin.coroutines.jvm.internal.ContinuationImpl: void releaseIntercepted()
androidx.core.view.ViewCompat$Api19Impl: void notifySubtreeAccessibilityStateChanged(android.view.ViewParent,android.view.View,android.view.View,int)
androidx.window.embedding.SplitRule: float getSplitRatio()
io.flutter.plugin.platform.SingleViewPresentation: io.flutter.plugin.platform.PlatformView getView()
androidx.window.embedding.EmbeddingBackend: java.util.Set getSplitRules()
kotlin.jvm.internal.CallableReference: java.util.List getParameters()
io.flutter.embedding.android.FlutterImageView: android.view.Surface getSurface()
androidx.window.embedding.EmbeddingTranslatingCallback: void accept(java.util.List)
io.flutter.embedding.engine.FlutterJNI: boolean nativeFlutterTextUtilsIsEmojiModifierBase(int)
androidx.window.layout.SidecarCompat$DistinctSidecarElementCallback: void onDeviceStateChanged(androidx.window.sidecar.SidecarDeviceState)
androidx.window.layout.SidecarAdapter$Companion: void setSidecarDevicePosture(androidx.window.sidecar.SidecarDeviceState,int)
androidx.window.layout.SidecarAdapter: androidx.window.layout.WindowLayoutInfo translate(androidx.window.sidecar.SidecarWindowLayoutInfo,androidx.window.sidecar.SidecarDeviceState)
com.google.android.exoplayer2.source.chunk.ChunkSampleStream: void seekToUs(long)
androidx.window.embedding.SplitController: androidx.window.embedding.SplitController getInstance()
androidx.window.embedding.SplitPlaceholderRule: android.content.Intent getPlaceholderIntent()
kotlinx.coroutines.android.AndroidDispatcherFactory: java.lang.String hintOnError()
androidx.window.core.Bounds: int getWidth()
com.google.android.exoplayer2.source.ProgressiveMediaPeriod: long getLargestQueuedTimestampUs(boolean)
io.flutter.embedding.engine.FlutterJNI: void onDisplayOverlaySurface(int,int,int,int,int)
androidx.core.view.ViewCompat$Api21Impl: float getTranslationZ(android.view.View)
com.google.android.exoplayer2.source.chunk.ChunkSampleStream: ChunkSampleStream(int,int[],com.google.android.exoplayer2.Format[],com.google.android.exoplayer2.source.chunk.ChunkSource,com.google.android.exoplayer2.source.SequenceableLoader$Callback,com.google.android.exoplayer2.upstream.Allocator,long,com.google.android.exoplayer2.drm.DrmSessionManager,com.google.android.exoplayer2.drm.DrmSessionEventListener$EventDispatcher,com.google.android.exoplayer2.upstream.LoadErrorHandlingPolicy,com.google.android.exoplayer2.source.MediaSourceEventListener$EventDispatcher)
com.google.common.collect.Iterators$EmptyModifiableIterator: com.google.common.collect.Iterators$EmptyModifiableIterator[] values()
androidx.window.embedding.EmbeddingCompat: EmbeddingCompat(androidx.window.extensions.embedding.ActivityEmbeddingComponent,androidx.window.embedding.EmbeddingAdapter)
androidx.window.layout.HardwareFoldingFeature$Type$Companion: androidx.window.layout.HardwareFoldingFeature$Type getFOLD()
androidx.window.layout.FoldingFeature$Orientation: FoldingFeature$Orientation(java.lang.String)
androidx.window.embedding.SplitPairFilter: SplitPairFilter(android.content.ComponentName,android.content.ComponentName,java.lang.String)
androidx.core.view.ViewCompat$Api21Impl: boolean dispatchNestedFling(android.view.View,float,float,boolean)
com.google.android.exoplayer2.decoder.SimpleDecoder: SimpleDecoder(com.google.android.exoplayer2.decoder.DecoderInputBuffer[],com.google.android.exoplayer2.decoder.DecoderOutputBuffer[])
io.flutter.embedding.android.FlutterActivity: FlutterActivity()
androidx.window.layout.HardwareFoldingFeature: androidx.window.layout.HardwareFoldingFeature$Type getType$window_release()
io.flutter.embedding.android.FlutterSplashView$SavedState: FlutterSplashView$SavedState(android.os.Parcel)
com.google.android.exoplayer2.drm.DrmUtil$Api18: boolean isDeniedByServerException(java.lang.Throwable)
kotlin.jvm.internal.FunctionReference: boolean isInline()
androidx.core.view.ViewCompat$Api16Impl: void postOnAnimation(android.view.View,java.lang.Runnable)
androidx.window.layout.FoldingFeature$Orientation$Companion: FoldingFeature$Orientation$Companion()
androidx.window.layout.WindowMetricsCalculator$Companion$reset$1: java.lang.Object invoke(java.lang.Object)
com.google.android.exoplayer2.audio.AudioCapabilities$Api29: int[] getDirectPlaybackSupportedEncodings()
androidx.window.R$attr: R$attr()
androidx.window.layout.WindowInfoTrackerImpl: WindowInfoTrackerImpl(androidx.window.layout.WindowMetricsCalculator,androidx.window.layout.WindowBackend)
com.google.android.exoplayer2.extractor.ogg.OpusReader: boolean readHeaders(com.google.android.exoplayer2.util.ParsableByteArray,long,com.google.android.exoplayer2.extractor.ogg.StreamReader$SetupData)
kotlin.jvm.internal.CallableReference: kotlin.reflect.KDeclarationContainer getOwner()
androidx.window.embedding.EmbeddingBackend: void unregisterRule(androidx.window.embedding.EmbeddingRule)
kotlin.jvm.internal.CallableReference: kotlin.reflect.KCallable getReflected()
com.google.android.exoplayer2.text.cea.Cea708Decoder: Cea708Decoder(int,java.util.List)
com.google.android.exoplayer2.source.dash.DashMediaPeriod: long selectTracks(com.google.android.exoplayer2.trackselection.ExoTrackSelection[],boolean[],com.google.android.exoplayer2.source.SampleStream[],boolean[],long)
androidx.window.embedding.SplitController: void access$setGlobalInstance$cp(androidx.window.embedding.SplitController)
io.flutter.embedding.engine.FlutterJNI: void nativeSetSemanticsEnabled(long,boolean)
androidx.window.embedding.SplitController: void setStaticSplitRules(java.util.Set)
androidx.window.layout.SidecarCompat: androidx.window.sidecar.SidecarInterface getSidecar()
io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat: io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat valueOf(java.lang.String)
com.google.android.exoplayer2.source.hls.HlsChunkSource: com.google.android.exoplayer2.source.chunk.Chunk maybeCreateEncryptionChunkFor(android.net.Uri,int)
io.flutter.embedding.engine.FlutterJNI: void nativeSetAccessibilityFeatures(long,int)
kotlin.jvm.internal.FunctionReference: FunctionReference(int)
androidx.window.layout.WindowInfoTracker$-CC: androidx.window.layout.WindowInfoTracker getOrCreate(android.content.Context)
com.google.common.collect.RegularImmutableList: int copyIntoArray(java.lang.Object[],int)
androidx.window.layout.SidecarAdapter$Companion: java.util.List getSidecarDisplayFeatures(androidx.window.sidecar.SidecarWindowLayoutInfo)
com.google.android.exoplayer2.source.dash.DefaultDashChunkSource: void onChunkLoadCompleted(com.google.android.exoplayer2.source.chunk.Chunk)
com.google.android.exoplayer2.source.ProgressiveMediaPeriod: boolean configureRetry(com.google.android.exoplayer2.source.ProgressiveMediaPeriod$ExtractingLoadable,int)
kotlin.coroutines.jvm.internal.ContinuationImpl: kotlin.coroutines.Continuation intercepted()
com.google.android.exoplayer2.extractor.mp4.AtomParsers: com.google.android.exoplayer2.extractor.mp4.Track parseTrak(com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom,com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom,long,com.google.android.exoplayer2.drm.DrmInitData,boolean,boolean)
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: boolean isEmpty()
androidx.window.layout.WindowMetricsCalculator: androidx.window.layout.WindowMetrics computeCurrentWindowMetrics(android.app.Activity)
io.flutter.embedding.engine.FlutterJNI: void updateDisplayMetrics(int,float,float,float)
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization[] values()
io.flutter.embedding.android.KeyEmbedderResponder: boolean handleEventImpl(android.view.KeyEvent,io.flutter.embedding.android.KeyboardManager$Responder$OnKeyEventHandledCallback)
io.flutter.embedding.android.FlutterTextureView: void setRenderSurface(android.view.Surface)
androidx.window.embedding.EmptyEmbeddingComponent: void setSplitInfoCallback(java.util.function.Consumer)
io.flutter.embedding.android.FlutterSplashView$SavedState: android.os.Bundle access$700(io.flutter.embedding.android.FlutterSplashView$SavedState)
androidx.window.layout.DisplayCompatHelperApi28: DisplayCompatHelperApi28()
com.google.android.exoplayer2.source.hls.HlsMediaPeriod: void maybeThrowPrepareError()
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action[] values()
io.flutter.embedding.android.FlutterView$ZeroSides: io.flutter.embedding.android.FlutterView$ZeroSides[] values()
androidx.window.embedding.ActivityFilter: boolean matchesIntent(android.content.Intent)
com.google.android.exoplayer2.source.smoothstreaming.SsMediaPeriod: long getAdjustedSeekPositionUs(long,com.google.android.exoplayer2.SeekParameters)
androidx.window.embedding.SplitInfo: int hashCode()
kotlin.jvm.internal.CallableReference: kotlin.reflect.KCallable compute()
androidx.window.layout.WindowLayoutInfo: java.util.List getDisplayFeatures()
androidx.window.layout.WindowMetrics: boolean equals(java.lang.Object)
androidx.window.layout.SidecarAdapter$Companion: int getSidecarDevicePosture$window_release(androidx.window.sidecar.SidecarDeviceState)
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: void addWindowLayoutInfoListener(android.app.Activity,java.util.concurrent.Executor,androidx.core.util.Consumer)
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest$RequestedDisplayMode: io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest$RequestedDisplayMode[] values()
androidx.window.layout.SidecarWindowBackend$ExtensionListenerImpl: SidecarWindowBackend$ExtensionListenerImpl(androidx.window.layout.SidecarWindowBackend)
androidx.window.core.Version: int getPatch()
io.flutter.embedding.engine.FlutterJNI: java.lang.String getObservatoryUri()
kotlin.coroutines.intrinsics.CoroutineSingletons: kotlin.coroutines.intrinsics.CoroutineSingletons[] values()
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: void removeListener(androidx.core.util.Consumer)
com.google.android.exoplayer2.extractor.jpeg.XmpMotionPhotoDescriptionParser: com.google.common.collect.ImmutableList parseMicroVideoOffsetFromDescription(org.xmlpull.v1.XmlPullParser)
androidx.window.core.Bounds: Bounds(int,int,int,int)
androidx.window.layout.FoldingFeature$State: FoldingFeature$State(java.lang.String)
androidx.window.core.Version: int compareTo(java.lang.Object)
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: androidx.core.util.Consumer getCallback()
androidx.core.view.ViewCompat$Api21Impl: java.lang.String getTransitionName(android.view.View)
com.google.android.exoplayer2.source.chunk.ChunkSampleStream: com.google.android.exoplayer2.Format[] access$300(com.google.android.exoplayer2.source.chunk.ChunkSampleStream)
androidx.window.embedding.EmbeddingAdapter: boolean translateIntentPredicates$lambda-8(java.util.Set,android.content.Intent)
androidx.core.graphics.drawable.IconCompatParcelizer: void write(androidx.core.graphics.drawable.IconCompat,androidx.versionedparcelable.VersionedParcel)
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: void removeListener(androidx.core.util.Consumer)
io.flutter.embedding.engine.FlutterJNI: void nativeInvokePlatformMessageResponseCallback(long,int,java.nio.ByteBuffer,int)
androidx.window.embedding.ExtensionEmbeddingBackend: java.util.concurrent.locks.ReentrantLock access$getGlobalLock$cp()
androidx.window.embedding.SplitRuleParser: java.util.Set parseSplitXml(android.content.Context,int)
com.google.android.exoplayer2.util.TimedValueQueue: java.lang.Object popFirst()
com.google.android.exoplayer2.source.hls.HlsSampleStreamWrapper: boolean seekInsideBufferUs(long)
io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode: io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode valueOf(java.lang.String)
com.google.android.exoplayer2.ExoPlayerImplInternal: void enableRenderers()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean access$100(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
androidx.window.layout.WindowMetrics: WindowMetrics(androidx.window.core.Bounds)
com.google.android.exoplayer2.trackselection.MappingTrackSelector$MappedTrackInfo: com.google.android.exoplayer2.source.TrackGroupArray getTrackGroups(int)
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: WindowInfoTrackerImpl$windowLayoutInfo$1(androidx.window.layout.WindowInfoTrackerImpl,android.app.Activity,kotlin.coroutines.Continuation)
androidx.window.embedding.SplitRule: SplitRule(int,int,float,int)
com.google.android.exoplayer2.drm.DrmInitData: com.google.android.exoplayer2.drm.DrmInitData merge(com.google.android.exoplayer2.drm.DrmInitData)
androidx.window.embedding.SplitController: void removeSplitListener(androidx.core.util.Consumer)
kotlin.reflect.KVisibility: kotlin.reflect.KVisibility valueOf(java.lang.String)
com.google.android.exoplayer2.source.ProgressiveMediaPeriod: int skipData(int,long)
androidx.core.view.ViewCompat$Api16Impl: void postInvalidateOnAnimation(android.view.View,int,int,int,int)
com.google.android.exoplayer2.source.hls.HlsSampleStreamWrapper: com.google.android.exoplayer2.extractor.TrackOutput track(int,int)
com.google.android.exoplayer2.trackselection.BaseTrackSelection: BaseTrackSelection(com.google.android.exoplayer2.source.TrackGroup,int[],int)
com.google.android.exoplayer2.drm.DrmUtil$Api23: boolean isMediaDrmResetException(java.lang.Throwable)
androidx.window.embedding.EmbeddingCompat$Companion: EmbeddingCompat$Companion()
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: WindowInfoTrackerCallbackAdapter$addListener$1$1(kotlinx.coroutines.flow.Flow,androidx.core.util.Consumer,kotlin.coroutines.Continuation)
androidx.window.layout.SidecarCompat$FirstAttachAdapter: SidecarCompat$FirstAttachAdapter(androidx.window.layout.SidecarCompat,android.app.Activity)
androidx.core.app.RemoteActionCompat: RemoteActionCompat()
androidx.core.view.ViewCompat$Api23Impl: void setScrollIndicators(android.view.View,int,int)
androidx.core.view.ViewCompat$Api16Impl: void setHasTransientState(android.view.View,boolean)
kotlin.coroutines.jvm.internal.BaseContinuationImpl: void releaseIntercepted()
androidx.window.embedding.MatcherUtils: boolean areComponentsMatching$window_release(android.content.ComponentName,android.content.ComponentName)
io.flutter.embedding.engine.FlutterJNI: android.graphics.Bitmap nativeGetBitmap(long)
com.google.android.exoplayer2.drm.FrameworkMediaDrm$Api31: void setLogSessionIdOnMediaDrmSession(android.media.MediaDrm,byte[],com.google.android.exoplayer2.analytics.PlayerId)
androidx.collection.SimpleArrayMap: int indexOfNull()
com.google.android.exoplayer2.ExoPlayerImplInternal: void notifyTrackSelectionRebuffer()
com.google.android.exoplayer2.source.dash.DefaultDashChunkSource: DefaultDashChunkSource(com.google.android.exoplayer2.source.chunk.ChunkExtractor$Factory,com.google.android.exoplayer2.upstream.LoaderErrorThrower,com.google.android.exoplayer2.source.dash.manifest.DashManifest,com.google.android.exoplayer2.source.dash.BaseUrlExclusionList,int,int[],com.google.android.exoplayer2.trackselection.ExoTrackSelection,int,com.google.android.exoplayer2.upstream.DataSource,long,int,boolean,java.util.List,com.google.android.exoplayer2.source.dash.PlayerEmsgHandler$PlayerTrackEmsgHandler,com.google.android.exoplayer2.analytics.PlayerId)
androidx.window.embedding.ActivityStack: boolean contains(android.app.Activity)
androidx.window.layout.SidecarWindowBackend: androidx.window.layout.ExtensionInterfaceCompat getWindowExtension()
io.flutter.view.AccessibilityViewEmbedder: AccessibilityViewEmbedder(android.view.View,int)
androidx.window.layout.WindowMetricsCalculatorCompat: android.graphics.Rect computeWindowBoundsIceCreamSandwich$window_release(android.app.Activity)
com.google.android.exoplayer2.source.ProgressiveMediaPeriod: long selectTracks(com.google.android.exoplayer2.trackselection.ExoTrackSelection[],boolean[],com.google.android.exoplayer2.source.SampleStream[],boolean[],long)
io.flutter.embedding.engine.FlutterJNI: void addEngineLifecycleListener(io.flutter.embedding.engine.FlutterEngine$EngineLifecycleListener)
com.google.android.exoplayer2.source.smoothstreaming.SsMediaPeriod: void updateManifest(com.google.android.exoplayer2.source.smoothstreaming.manifest.SsManifest)
com.google.android.exoplayer2.upstream.DefaultAllocator: void release(com.google.android.exoplayer2.upstream.Allocation)
androidx.window.embedding.SplitController: SplitController()
androidx.window.embedding.EmbeddingCompat$Companion: androidx.window.extensions.embedding.ActivityEmbeddingComponent embeddingComponent()
androidx.window.layout.ExtensionsWindowLayoutInfoAdapter: androidx.window.layout.WindowLayoutInfo translate$window_release(android.app.Activity,androidx.window.extensions.layout.WindowLayoutInfo)
kotlin.jvm.internal.FunctionReference: kotlin.reflect.KCallable computeReflected()
androidx.window.embedding.EmbeddingBackend: boolean isSplitSupported()
androidx.core.view.ViewCompat$Api21Impl: float getZ(android.view.View)
com.google.android.exoplayer2.source.dash.DefaultDashChunkSource: void getNextChunk(long,long,java.util.List,com.google.android.exoplayer2.source.chunk.ChunkHolder)
kotlin.coroutines.jvm.internal.BaseContinuationImpl: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)
kotlinx.coroutines.android.AndroidDispatcherFactory: AndroidDispatcherFactory()
androidx.core.view.ViewCompat$Api21Impl: boolean isNestedScrollingEnabled(android.view.View)
com.google.android.exoplayer2.ExoPlayerImpl: void setVideoOutputInternal(java.lang.Object)
androidx.window.layout.WindowMetricsCalculator$Companion: WindowMetricsCalculator$Companion()
androidx.window.embedding.ExtensionEmbeddingBackend: void setEmbeddingExtension(androidx.window.embedding.EmbeddingInterfaceCompat)
io.flutter.view.AccessibilityBridge$AccessibilityFeature: io.flutter.view.AccessibilityBridge$AccessibilityFeature[] values()
kotlin.coroutines.AbstractCoroutineContextElement: kotlin.coroutines.CoroutineContext$Key getKey()
androidx.window.layout.WindowMetricsCalculator$Companion$reset$1: WindowMetricsCalculator$Companion$reset$1()
androidx.window.layout.FoldingFeature$Orientation: java.lang.String toString()
androidx.window.layout.WindowMetricsCalculator$Companion$overrideDecorator$1: androidx.window.layout.WindowMetricsCalculator invoke(androidx.window.layout.WindowMetricsCalculator)
androidx.window.core.Version: androidx.window.core.Version access$getCURRENT$cp()
com.google.android.exoplayer2.util.Util: java.util.HashMap createIsoLanguageReplacementMap()
androidx.window.layout.HardwareFoldingFeature: java.lang.String toString()
io.flutter.embedding.engine.FlutterJNI: java.lang.String getVMServiceUri()
io.flutter.embedding.android.FlutterImageView$SurfaceKind: io.flutter.embedding.android.FlutterImageView$SurfaceKind[] values()
kotlin.jvm.internal.FunctionReferenceImpl: FunctionReferenceImpl(int,java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,int)
androidx.window.embedding.SplitPlaceholderRule: SplitPlaceholderRule(java.util.Set,android.content.Intent,int,int,float,int,int,kotlin.jvm.internal.DefaultConstructorMarker)
kotlin.coroutines.jvm.internal.ContinuationImpl: kotlin.coroutines.CoroutineContext getContext()
androidx.window.embedding.EmbeddingInterfaceCompat$EmbeddingCallbackInterface: void onSplitInfoChanged(java.util.List)
com.google.android.exoplayer2.util.TimedValueQueue: void doubleCapacityIfFull()
io.flutter.embedding.engine.FlutterJNI: void detachFromNativeAndReleaseResources()
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: void accept(java.lang.Object)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType: io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType[] values()
io.flutter.embedding.engine.FlutterJNI: void requestDartDeferredLibrary(int)
com.google.common.collect.RegularImmutableMap: java.lang.Object get(java.lang.Object)
com.google.android.exoplayer2.source.smoothstreaming.DefaultSsChunkSource: void getNextChunk(long,long,java.util.List,com.google.android.exoplayer2.source.chunk.ChunkHolder)
io.flutter.embedding.engine.FlutterJNI: void markTextureFrameAvailable(long)
androidx.core.app.RemoteActionCompatParcelizer: androidx.core.app.RemoteActionCompat read(androidx.versionedparcelable.VersionedParcel)
androidx.window.embedding.ExtensionEmbeddingBackend$Companion: boolean isExtensionVersionSupported(java.lang.Integer)
androidx.window.embedding.EmbeddingCompat: void setSplitRules(java.util.Set)
com.google.android.exoplayer2.source.hls.HlsMediaPeriod: long seekToUs(long)
kotlinx.coroutines.internal.ArrayQueue: void ensureCapacity()
androidx.window.layout.EmptyDecorator: androidx.window.layout.WindowInfoTracker decorate(androidx.window.layout.WindowInfoTracker)
androidx.window.embedding.EmbeddingBackend: void registerSplitListenerForActivity(android.app.Activity,java.util.concurrent.Executor,androidx.core.util.Consumer)
com.google.android.exoplayer2.source.chunk.BaseMediaChunkOutput: void setSampleOffsetUs(long)
androidx.window.core.Version$Companion: androidx.window.core.Version getVERSION_1_0()
com.google.android.exoplayer2.source.dash.DashMediaPeriod: void selectNewStreams(com.google.android.exoplayer2.trackselection.ExoTrackSelection[],com.google.android.exoplayer2.source.SampleStream[],boolean[],long,int[])
androidx.window.embedding.EmbeddingAdapter: java.lang.Object component2(android.util.Pair)
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event[] values()
com.google.android.exoplayer2.source.smoothstreaming.SsMediaPeriod: com.google.android.exoplayer2.source.TrackGroupArray buildTrackGroups(com.google.android.exoplayer2.source.smoothstreaming.manifest.SsManifest,com.google.android.exoplayer2.drm.DrmSessionManager)
io.flutter.embedding.engine.FlutterJNI: void nativeDispatchEmptyPlatformMessage(long,java.lang.String,int)
androidx.window.embedding.EmbeddingTranslatingCallback: EmbeddingTranslatingCallback(androidx.window.embedding.EmbeddingInterfaceCompat$EmbeddingCallbackInterface,androidx.window.embedding.EmbeddingAdapter)
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: void addListener(androidx.core.util.Consumer)
io.flutter.embedding.engine.FlutterJNI: boolean nativeFlutterTextUtilsIsRegionalIndicator(int)
androidx.window.layout.SidecarCompat: void registerConfigurationChangeListener(android.app.Activity)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.WindowInsetsAnimation$Callback getAnimationCallback()
androidx.window.layout.FoldingFeature$OcclusionType$Companion: FoldingFeature$OcclusionType$Companion()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback: android.view.WindowInsetsAnimation$Bounds onStart(android.view.WindowInsetsAnimation,android.view.WindowInsetsAnimation$Bounds)
com.google.android.exoplayer2.source.smoothstreaming.SsMediaPeriod: long selectTracks(com.google.android.exoplayer2.trackselection.ExoTrackSelection[],boolean[],com.google.android.exoplayer2.source.SampleStream[],boolean[],long)
io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode: io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode[] values()
kotlin.jvm.internal.FunctionReference: boolean isInfix()
com.google.android.exoplayer2.ExoPlayerImplInternal: void startRenderers()
kotlin.coroutines.jvm.internal.BaseContinuationImpl: kotlin.coroutines.Continuation create(kotlin.coroutines.Continuation)
androidx.window.layout.WindowMetricsCalculatorCompat: WindowMetricsCalculatorCompat()
io.flutter.embedding.engine.FlutterJNI: void setPlatformMessageHandler(io.flutter.embedding.engine.dart.PlatformMessageHandler)
androidx.core.view.ViewCompat$Api19Impl: void setAccessibilityLiveRegion(android.view.View,int)
com.google.android.exoplayer2.extractor.ts.UserDataReader: void consume(long,com.google.android.exoplayer2.util.ParsableByteArray)
io.flutter.embedding.engine.FlutterJNI: void nativeCleanupMessageData(long)
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization valueOf(java.lang.String)
android.support.v4.graphics.drawable.IconCompatParcelizer: IconCompatParcelizer()
io.flutter.embedding.android.KeyEmbedderResponder: void synchronizePressingKey(io.flutter.embedding.android.KeyboardMap$PressingGoal,boolean,long,long,android.view.KeyEvent,java.util.ArrayList)
com.google.android.exoplayer2.source.hls.HlsMediaPeriod: com.google.android.exoplayer2.source.hls.HlsSampleStreamWrapper[] access$200(com.google.android.exoplayer2.source.hls.HlsMediaPeriod)
kotlin.jvm.internal.CallableReference: java.lang.Object getBoundReceiver()
com.google.android.exoplayer2.source.TrackGroup: int indexOf(com.google.android.exoplayer2.Format)
androidx.window.layout.SidecarCompat: androidx.window.layout.SidecarAdapter access$getSidecarAdapter$p(androidx.window.layout.SidecarCompat)
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: java.lang.Object invokeSuspend(java.lang.Object)
com.google.android.exoplayer2.ExoPlayerImplInternal: void maybeUpdateLoadingPeriod()
com.google.android.exoplayer2.source.hls.HlsSampleStreamWrapper: void setSampleOffsetUs(long)
com.google.android.exoplayer2.source.dash.DefaultDashChunkSource: boolean onChunkLoadError(com.google.android.exoplayer2.source.chunk.Chunk,boolean,com.google.android.exoplayer2.upstream.LoadErrorHandlingPolicy$LoadErrorInfo,com.google.android.exoplayer2.upstream.LoadErrorHandlingPolicy)
androidx.window.embedding.SplitPairRule: boolean getFinishSecondaryWithPrimary()
io.flutter.embedding.engine.FlutterJNI: boolean isAttached()
androidx.window.core.Bounds: boolean isEmpty()
com.example.toktik.MainActivity: MainActivity()
androidx.window.layout.WindowInfoTracker$Companion: androidx.window.layout.WindowBackend windowBackend$window_release(android.content.Context)
io.flutter.embedding.engine.FlutterJNI: boolean nativeFlutterTextUtilsIsVariationSelector(int)
androidx.window.embedding.SplitRule: SplitRule()
com.google.common.collect.ImmutableCollection: java.lang.Object[] toArray()
androidx.window.layout.ActivityCompatHelperApi24: ActivityCompatHelperApi24()
com.google.android.exoplayer2.source.ads.AdPlaybackState: com.google.android.exoplayer2.source.ads.AdPlaybackState$AdGroup getAdGroup(int)
androidx.window.embedding.ActivityFilter: ActivityFilter(android.content.ComponentName,java.lang.String)
androidx.window.layout.ExtensionInterfaceCompat$ExtensionCallbackInterface: void onWindowLayoutChanged(android.app.Activity,androidx.window.layout.WindowLayoutInfo)
androidx.window.core.Version: Version(int,int,int,java.lang.String,kotlin.jvm.internal.DefaultConstructorMarker)
com.google.android.exoplayer2.source.smoothstreaming.SsMediaPeriod: void release()
com.google.android.exoplayer2.metadata.id3.ChapterFrame: ChapterFrame(android.os.Parcel)
androidx.window.layout.ActivityCompatHelperApi24: boolean isInMultiWindowMode(android.app.Activity)
io.flutter.plugin.platform.SingleViewPresentation: SingleViewPresentation(android.content.Context,android.view.Display,io.flutter.plugin.platform.AccessibilityEventsDelegate,io.flutter.plugin.platform.SingleViewPresentation$PresentationState,android.view.View$OnFocusChangeListener,boolean)
com.google.android.exoplayer2.extractor.avi.AviExtractor: com.google.android.exoplayer2.extractor.avi.ChunkReader[] access$100(com.google.android.exoplayer2.extractor.avi.AviExtractor)
androidx.window.embedding.ActivityFilter: java.lang.String toString()
androidx.window.core.Bounds: int getHeight()
androidx.collection.SimpleArrayMap: SimpleArrayMap()
com.google.android.exoplayer2.source.chunk.ChunkSampleStream: com.google.android.exoplayer2.source.chunk.BaseMediaChunk discardUpstreamMediaChunksFromIndex(int)
com.google.android.exoplayer2.util.TimedValueQueue: void addUnchecked(long,java.lang.Object)
androidx.window.layout.WindowMetrics: android.graphics.Rect getBounds()
io.flutter.embedding.engine.FlutterJNI: void setRefreshRateFPS(float)
androidx.window.embedding.SplitInfo: androidx.window.embedding.ActivityStack getPrimaryActivityStack()
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.FlutterOverlaySurface createOverlaySurface()
com.google.android.exoplayer2.ExoPlayerImplInternal: void enableRenderers(boolean[])
androidx.window.layout.ExtensionsWindowLayoutInfoAdapter: boolean validBounds(android.app.Activity,androidx.window.core.Bounds)
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag[] values()
androidx.window.embedding.SplitRuleParser: java.util.Set parseSplitRules$window_release(android.content.Context,int)
io.flutter.embedding.engine.FlutterJNI: void updateCustomAccessibilityActions(java.nio.ByteBuffer,java.lang.String[])
com.google.android.exoplayer2.drm.DrmUtil$Api21: int mediaDrmStateExceptionToErrorCode(java.lang.Throwable)
kotlin.jvm.internal.CallableReference: boolean isFinal()
com.google.android.exoplayer2.text.ttml.TtmlNode: java.lang.String[] getStyleIds()
com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap buildOrThrow()
androidx.window.layout.SidecarAdapter: boolean isEqualSidecarDisplayFeatures(java.util.List,java.util.List)
androidx.core.view.WindowInsetsCompat$BuilderImpl20: androidx.core.view.WindowInsetsCompat build()
androidx.core.view.ViewCompat$Api16Impl: int getMinimumHeight(android.view.View)
io.flutter.embedding.engine.FlutterJNI: boolean isCodePointEmoji(int)
androidx.window.layout.FoldingFeature$OcclusionType: java.lang.String toString()
com.google.android.exoplayer2.source.smoothstreaming.SsMediaSource$Factory: SsMediaSource$Factory(com.google.android.exoplayer2.upstream.DataSource$Factory)
io.flutter.embedding.engine.FlutterJNI: void nativeOnVsync(long,long,long)
io.flutter.plugins.GeneratedPluginRegistrant: GeneratedPluginRegistrant()
io.flutter.embedding.engine.FlutterJNI: void updateJavaAssetManager(android.content.res.AssetManager,java.lang.String)
androidx.window.embedding.SplitRuleParser: androidx.window.embedding.SplitPlaceholderRule parseSplitPlaceholderRule(android.content.Context,android.content.res.XmlResourceParser)
kotlin.coroutines.AbstractCoroutineContextElement: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)
androidx.window.core.Version: androidx.window.core.Version parse(java.lang.String)
androidx.window.embedding.SplitController: void clearRegisteredRules()
io.flutter.view.AccessibilityBridge$AccessibilityFeature: io.flutter.view.AccessibilityBridge$AccessibilityFeature valueOf(java.lang.String)
io.flutter.plugins.GeneratedPluginRegistrant: void registerWith(io.flutter.embedding.engine.FlutterEngine)
kotlin.coroutines.AbstractCoroutineContextElement: kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Key)
androidx.window.java.R: R()
androidx.window.embedding.ExtensionEmbeddingBackend$EmbeddingCallbackImpl: ExtensionEmbeddingBackend$EmbeddingCallbackImpl(androidx.window.embedding.ExtensionEmbeddingBackend)
androidx.window.layout.HardwareFoldingFeature: androidx.window.layout.FoldingFeature$Orientation getOrientation()
androidx.window.embedding.SplitPairFilter: boolean equals(java.lang.Object)
io.flutter.view.AccessibilityBridge$TextDirection: io.flutter.view.AccessibilityBridge$TextDirection[] values()
io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat: io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat[] values()
androidx.window.embedding.ExtensionEmbeddingBackend: void unregisterRule(androidx.window.embedding.EmbeddingRule)
androidx.window.layout.SidecarWindowBackend: boolean isActivityRegistered(android.app.Activity)
com.google.android.exoplayer2.audio.MediaCodecAudioRenderer$Api23: void setAudioSinkPreferredDevice(com.google.android.exoplayer2.audio.AudioSink,java.lang.Object)
androidx.window.layout.WindowInfoTrackerDecorator: androidx.window.layout.WindowInfoTracker decorate(androidx.window.layout.WindowInfoTracker)
androidx.window.layout.WindowInfoTracker$-CC: void reset()
androidx.window.layout.SidecarCompat$Companion: android.os.IBinder getActivityWindowToken$window_release(android.app.Activity)
com.google.android.exoplayer2.extractor.mp4.Mp4Extractor: void processMoovAtom(com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)
io.flutter.view.AccessibilityBridge$TextDirection: io.flutter.view.AccessibilityBridge$TextDirection valueOf(java.lang.String)
androidx.core.view.ViewCompat$Api28Impl: void addOnUnhandledKeyEventListener(android.view.View,androidx.core.view.ViewCompat$OnUnhandledKeyEventListenerCompat)
androidx.window.layout.SidecarCompat: androidx.window.layout.WindowLayoutInfo getWindowLayoutInfo(android.app.Activity)
androidx.core.view.ViewCompat$Api16Impl: void postInvalidateOnAnimation(android.view.View)
com.google.android.exoplayer2.source.hls.HlsSampleStreamWrapper: void mapSampleQueuesToMatchTrackGroups()
io.flutter.embedding.engine.FlutterJNI: void destroyOverlaySurfaces()
androidx.window.embedding.ActivityFilter: int hashCode()
androidx.versionedparcelable.CustomVersionedParcelable: CustomVersionedParcelable()
com.google.android.exoplayer2.text.cea.Cea708Decoder: java.util.List getDisplayCues()
androidx.window.embedding.EmbeddingAdapter: boolean translateActivityPairPredicates$lambda-1(androidx.window.embedding.EmbeddingAdapter,java.util.Set,android.util.Pair)
io.flutter.view.AccessibilityViewEmbedder: boolean performAction(int,int,android.os.Bundle)
com.google.android.exoplayer2.source.dash.DefaultDashChunkSource: long getAvailableLiveDurationUs(long,long)
com.google.android.exoplayer2.source.hls.HlsSampleStreamWrapper: void setDrmInitData(com.google.android.exoplayer2.drm.DrmInitData)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.View access$402(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback,android.view.View)
com.google.android.exoplayer2.audio.DefaultAudioSink: void configure(com.google.android.exoplayer2.Format,int,int[])
kotlin.jvm.internal.FunctionReference: boolean isOperator()
kotlinx.coroutines.internal.ThreadState: void restore(kotlin.coroutines.CoroutineContext)
kotlin.coroutines.AbstractCoroutineContextElement: AbstractCoroutineContextElement(kotlin.coroutines.CoroutineContext$Key)
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag valueOf(java.lang.String)
io.flutter.embedding.android.FlutterImageView$SurfaceKind: io.flutter.embedding.android.FlutterImageView$SurfaceKind valueOf(java.lang.String)
com.google.common.collect.RegularImmutableSet: <clinit>()
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: void accept(androidx.window.layout.WindowLayoutInfo)
androidx.collection.SimpleArrayMap: void clear()
io.flutter.embedding.engine.FlutterJNI: void onVsync(long,long,long)
androidx.window.layout.SidecarAdapter: SidecarAdapter()
androidx.window.embedding.ActivityRule: boolean getAlwaysExpand()
com.google.android.exoplayer2.text.cea.Cea708Decoder: void resetCueBuilders()
androidx.window.layout.SidecarWindowBackend$Companion: androidx.window.layout.SidecarWindowBackend getInstance(android.content.Context)
androidx.window.layout.SidecarCompat$Companion: SidecarCompat$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
androidx.core.view.ViewCompat$Api19Impl: boolean isLayoutDirectionResolved(android.view.View)
androidx.core.view.ViewCompat$Api21Impl: void setElevation(android.view.View,float)
io.flutter.embedding.android.DrawableSplashScreen$DrawableSplashScreenView: void setSplashDrawable(android.graphics.drawable.Drawable)
com.google.common.collect.RegularImmutableMap: com.google.common.collect.ImmutableSet createKeySet()
com.google.android.exoplayer2.extractor.jpeg.XmpMotionPhotoDescriptionParser: boolean parseMotionPhotoFlagFromDescription(org.xmlpull.v1.XmlPullParser)
androidx.window.core.Version$bigInteger$2: java.math.BigInteger invoke()
kotlin.coroutines.jvm.internal.SuspendLambda: SuspendLambda(int,kotlin.coroutines.Continuation)
com.google.android.exoplayer2.source.TrackGroup: void verifyCorrectness()
io.flutter.plugin.editing.TextInputPlugin: android.view.inputmethod.InputConnection createInputConnection(android.view.View,io.flutter.embedding.android.KeyboardManager,android.view.inputmethod.EditorInfo)
kotlinx.coroutines.internal.ThreadSafeHeap: void siftUpFrom(int)
io.flutter.embedding.engine.FlutterJNI: void nativeDispatchPlatformMessage(long,java.lang.String,java.nio.ByteBuffer,int,int)
androidx.window.embedding.ActivityStack: java.lang.String toString()
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: void attachToGLContext(int)
com.google.common.collect.RegularImmutableSet: java.lang.Object[] internalArray()
com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor: void onEmsgLeafAtomRead(com.google.android.exoplayer2.util.ParsableByteArray)
com.google.android.exoplayer2.extractor.mp4.Mp4Extractor: void seek(long,long)
kotlin.coroutines.jvm.internal.ContinuationImpl: ContinuationImpl(kotlin.coroutines.Continuation)
androidx.window.embedding.ExtensionEmbeddingBackend: java.util.concurrent.CopyOnWriteArrayList getSplitChangeCallbacks()
com.google.android.exoplayer2.source.hls.HlsSampleStreamWrapper: com.google.android.exoplayer2.extractor.TrackOutput getMappedTrackOutput(int,int)
com.google.android.exoplayer2.extractor.avi.AviExtractor: com.google.android.exoplayer2.extractor.avi.ChunkReader getChunkReader(int)
com.google.android.exoplayer2.source.hls.HlsSampleStreamWrapper: com.google.android.exoplayer2.source.SampleQueue createSampleQueue(int,int)
com.google.android.exoplayer2.extractor.ogg.VorbisReader: int decodeBlockSize(byte,com.google.android.exoplayer2.extractor.ogg.VorbisReader$VorbisSetup)
io.flutter.view.AccessibilityViewEmbedder: void cacheVirtualIdMappings(android.view.View,int,int)
androidx.core.view.ViewCompat$Api21Impl: androidx.core.view.WindowInsetsCompat computeSystemWindowInsets(android.view.View,androidx.core.view.WindowInsetsCompat,android.graphics.Rect)
androidx.window.embedding.MatcherUtils: boolean wildcardMatch(java.lang.String,java.lang.String)
com.google.android.exoplayer2.source.dash.DefaultDashChunkSource: com.google.android.exoplayer2.source.dash.DefaultDashChunkSource$RepresentationHolder updateSelectedBaseUrl(int)
androidx.window.embedding.EmbeddingBackend: void registerRule(androidx.window.embedding.EmbeddingRule)
kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState valueOf(java.lang.String)
androidx.window.embedding.ExtensionEmbeddingBackend$Companion: ExtensionEmbeddingBackend$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
androidx.window.core.Bounds: int getLeft()
androidx.window.layout.SidecarCompat: boolean validateExtensionInterface()
com.google.android.exoplayer2.extractor.mp4.MetadataUtil: com.google.android.exoplayer2.metadata.id3.TextInformationFrame parseStandardGenreAttribute(com.google.android.exoplayer2.util.ParsableByteArray)
androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper: ExtensionEmbeddingBackend$SplitListenerWrapper(android.app.Activity,java.util.concurrent.Executor,androidx.core.util.Consumer)
com.google.android.exoplayer2.trackselection.BaseTrackSelection: com.google.android.exoplayer2.Format getSelectedFormat()
androidx.core.view.ViewCompat$Api21Impl: void setBackgroundTintList(android.view.View,android.content.res.ColorStateList)
kotlinx.coroutines.channels.BufferOverflow: kotlinx.coroutines.channels.BufferOverflow valueOf(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void ensureAttachedToNative()
com.google.android.exoplayer2.source.hls.HlsChunkSource: boolean onPlaylistError(android.net.Uri,long)
androidx.collection.SimpleArrayMap: java.lang.Object valueAt(int)
androidx.window.core.Version: Version(int,int,int,java.lang.String)
androidx.core.view.ViewCompat$Api21Impl: void stopNestedScroll(android.view.View)
io.flutter.plugin.platform.PlatformViewsController: java.lang.Class[] access$600()
androidx.core.view.ViewCompat$Api16Impl: android.view.ViewParent getParentForAccessibility(android.view.View)
androidx.window.embedding.SplitController: void unregisterRule(androidx.window.embedding.EmbeddingRule)
com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void maybeThrowError(int)
com.google.android.exoplayer2.source.dash.DashMediaPeriod: long getAdjustedSeekPositionUs(long,com.google.android.exoplayer2.SeekParameters)
com.google.android.exoplayer2.source.hls.HlsSampleStreamWrapper: boolean selectTracks(com.google.android.exoplayer2.trackselection.ExoTrackSelection[],boolean[],com.google.android.exoplayer2.source.SampleStream[],boolean[],long,boolean)
com.google.android.exoplayer2.metadata.Metadata: com.google.android.exoplayer2.metadata.Metadata$Entry get(int)
com.google.android.exoplayer2.source.ProgressiveMediaPeriod: boolean seekInsideBufferUs(boolean[],long)
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: SurfaceTextureWrapper(android.graphics.SurfaceTexture,java.lang.Runnable)
com.google.android.exoplayer2.trackselection.TrackSelectorResult: boolean isEquivalent(com.google.android.exoplayer2.trackselection.TrackSelectorResult,int)
com.google.android.exoplayer2.source.dash.DashMediaPeriod: void discardBuffer(long,boolean)
androidx.window.layout.SidecarAdapter: boolean isEqualSidecarDeviceState(androidx.window.sidecar.SidecarDeviceState,androidx.window.sidecar.SidecarDeviceState)
io.flutter.embedding.android.FlutterSplashView$SavedState: java.lang.String access$602(io.flutter.embedding.android.FlutterSplashView$SavedState,java.lang.String)
androidx.collection.SimpleArrayMap: int indexOfValue(java.lang.Object)
com.google.common.base.Function: java.lang.Object apply(java.lang.Object)
androidx.window.layout.FoldingFeature$OcclusionType$Companion: FoldingFeature$OcclusionType$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
androidx.window.embedding.SplitInfo: SplitInfo(androidx.window.embedding.ActivityStack,androidx.window.embedding.ActivityStack,float)
com.google.android.exoplayer2.audio.DefaultAudioSink: boolean drainToEndOfStream()
com.google.android.exoplayer2.source.hls.HlsMediaPeriod: void onPlaylistChanged()
kotlinx.coroutines.internal.ThreadSafeHeap: kotlinx.coroutines.internal.ThreadSafeHeapNode firstImpl()
com.google.android.exoplayer2.extractor.ogg.VorbisReader: boolean readHeaders(com.google.android.exoplayer2.util.ParsableByteArray,long,com.google.android.exoplayer2.extractor.ogg.StreamReader$SetupData)
io.flutter.embedding.engine.FlutterJNI: boolean getIsSoftwareRenderingEnabled()
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType[] values()
androidx.window.embedding.SplitPlaceholderRule: java.util.Set getFilters()
io.flutter.embedding.engine.FlutterJNI: void nativeDispatchPointerDataPacket(long,java.nio.ByteBuffer,int)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: void pushTransform(float[])
androidx.core.view.ViewCompat$Api21Impl: boolean hasNestedScrollingParent(android.view.View)
androidx.window.layout.DisplayCompatHelperApi17: void getRealSize(android.view.Display,android.graphics.Point)
androidx.core.view.ViewCompat$Api21Impl: void callCompatInsetAnimationCallback(android.view.WindowInsets,android.view.View)
com.google.android.exoplayer2.mediacodec.MediaCodecInfo: android.media.MediaCodecInfo$CodecProfileLevel[] getProfileLevels()
androidx.window.layout.WindowInfoTracker$Companion: void overrideDecorator(androidx.window.layout.WindowInfoTrackerDecorator)
io.flutter.plugin.editing.TextInputPlugin: void updateAutofillConfigurationIfNeeded(io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration)
com.google.android.exoplayer2.audio.DefaultAudioSink: void setupAudioProcessors()
androidx.window.layout.SidecarCompat$TranslatingCallback: void onWindowLayoutChanged(android.os.IBinder,androidx.window.sidecar.SidecarWindowLayoutInfo)
androidx.window.layout.SidecarCompat$FirstAttachAdapter: void onViewAttachedToWindow(android.view.View)
android.support.v4.app.RemoteActionCompatParcelizer: void write(androidx.core.app.RemoteActionCompat,androidx.versionedparcelable.VersionedParcel)
io.flutter.embedding.engine.FlutterJNI: void nativeSurfaceWindowChanged(long,android.view.Surface)
io.flutter.embedding.engine.FlutterJNI: void dispatchSemanticsAction(int,io.flutter.view.AccessibilityBridge$Action)
androidx.window.embedding.SplitController$Companion: SplitController$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
kotlinx.coroutines.channels.ArrayChannel: void enqueueElement(int,java.lang.Object)
com.google.android.exoplayer2.ExoPlayerImpl$Api31: com.google.android.exoplayer2.analytics.PlayerId registerMediaMetricsListener(android.content.Context,com.google.android.exoplayer2.ExoPlayerImpl,boolean)
com.google.android.exoplayer2.source.hls.HlsSampleStreamWrapper: boolean canDiscardUpstreamMediaChunksFromIndex(int)
com.google.android.exoplayer2.drm.DrmInitData: com.google.android.exoplayer2.drm.DrmInitData copyWithSchemeType(java.lang.String)
androidx.window.core.Version$Companion: Version$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
com.google.android.exoplayer2.upstream.DefaultAllocator: void release(com.google.android.exoplayer2.upstream.Allocator$AllocationNode)
androidx.window.embedding.SplitPairRule: boolean getClearTop()
androidx.window.embedding.ActivityRule: int hashCode()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.WindowInsets access$602(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback,android.view.WindowInsets)
com.google.android.exoplayer2.source.ads.AdPlaybackState: int hashCode()
com.google.android.exoplayer2.audio.DefaultAudioSink$DefaultAudioProcessorChain: DefaultAudioSink$DefaultAudioProcessorChain(com.google.android.exoplayer2.audio.AudioProcessor[],com.google.android.exoplayer2.audio.SilenceSkippingAudioProcessor,com.google.android.exoplayer2.audio.SonicAudioProcessor)
androidx.window.layout.FoldingFeature: androidx.window.layout.FoldingFeature$State getState()
com.google.android.exoplayer2.mediacodec.SynchronousMediaCodecAdapter: java.nio.ByteBuffer getInputBuffer(int)
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: java.lang.Object invoke(kotlinx.coroutines.flow.FlowCollector,kotlin.coroutines.Continuation)
androidx.window.embedding.EmbeddingAdapter: androidx.window.embedding.SplitInfo translate(androidx.window.extensions.embedding.SplitInfo)
io.flutter.embedding.engine.FlutterJNI: void dispatchSemanticsAction(int,io.flutter.view.AccessibilityBridge$Action,java.lang.Object)
androidx.window.layout.WindowMetricsCalculator$Companion$decorator$1: androidx.window.layout.WindowMetricsCalculator invoke(androidx.window.layout.WindowMetricsCalculator)
androidx.window.layout.HardwareFoldingFeature$Companion: void validateFeatureBounds$window_release(androidx.window.core.Bounds)
androidx.window.embedding.EmbeddingAdapter: boolean translateActivityPredicates$lambda-6(java.util.Set,android.app.Activity)
androidx.window.layout.FoldingFeature$State: java.lang.String toString()
androidx.core.graphics.drawable.IconCompatParcelizer: IconCompatParcelizer()
androidx.window.core.Version$Companion: androidx.window.core.Version parse(java.lang.String)
com.google.android.exoplayer2.source.ClippingMediaPeriod: long selectTracks(com.google.android.exoplayer2.trackselection.ExoTrackSelection[],boolean[],com.google.android.exoplayer2.source.SampleStream[],boolean[],long)
androidx.window.layout.FoldingFeature: androidx.window.layout.FoldingFeature$OcclusionType getOcclusionType()
androidx.window.embedding.SplitRuleParser: androidx.window.embedding.SplitPairRule parseSplitPairRule(android.content.Context,android.content.res.XmlResourceParser)
androidx.window.layout.ExtensionsWindowLayoutInfoAdapter: ExtensionsWindowLayoutInfoAdapter()
io.flutter.embedding.engine.FlutterJNI: void onPreEngineRestart()
io.flutter.view.FlutterCallbackInformation: io.flutter.view.FlutterCallbackInformation lookupCallbackInformation(long)
kotlin.jvm.internal.CallableReference: CallableReference(java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,boolean)
androidx.core.view.ViewCompat$Api21Impl: void setZ(android.view.View,float)
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType valueOf(java.lang.String)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: FlutterMutatorsStack()
io.flutter.embedding.engine.FlutterJNI: void dispatchEmptyPlatformMessage(java.lang.String,int)
com.google.android.exoplayer2.mediacodec.MediaCodecInfo$Api29: int areResolutionAndFrameRateCovered(android.media.MediaCodecInfo$VideoCapabilities,int,int,double)
io.flutter.embedding.engine.FlutterJNI: void setPlatformViewsController(io.flutter.plugin.platform.PlatformViewsController)
androidx.window.layout.SidecarCompat$TranslatingCallback: void onDeviceStateChanged(androidx.window.sidecar.SidecarDeviceState)
androidx.window.layout.WindowMetricsCalculator$Companion$decorator$1: WindowMetricsCalculator$Companion$decorator$1()
io.flutter.embedding.android.FlutterSplashView$SavedState: void writeToParcel(android.os.Parcel,int)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback: android.view.WindowInsets onProgress(android.view.WindowInsets,java.util.List)
androidx.window.embedding.SplitController: java.util.Set getSplitRules()
io.flutter.view.AccessibilityViewEmbedder: android.view.accessibility.AccessibilityNodeInfo getRootNode(android.view.View,int,android.graphics.Rect)
androidx.collection.SimpleArrayMap: int indexOf(java.lang.Object,int)
androidx.core.view.ViewCompat$Api20Impl: void requestApplyInsets(android.view.View)
com.google.android.exoplayer2.drm.DrmUtil$Api18: boolean isNotProvisionedException(java.lang.Throwable)
androidx.window.embedding.EmbeddingRule: EmbeddingRule()
com.google.android.exoplayer2.source.chunk.ChunkSampleStream: void release(com.google.android.exoplayer2.source.chunk.ChunkSampleStream$ReleaseCallback)
io.flutter.embedding.android.KeyData$Type: io.flutter.embedding.android.KeyData$Type valueOf(java.lang.String)
androidx.window.embedding.ExtensionEmbeddingBackend: androidx.window.embedding.ExtensionEmbeddingBackend access$getGlobalInstance$cp()
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: SidecarWindowBackend$WindowLayoutChangeCallbackWrapper(android.app.Activity,java.util.concurrent.Executor,androidx.core.util.Consumer)
androidx.window.embedding.SplitPairFilter: java.lang.String getSecondaryActivityIntentAction()
androidx.window.embedding.ExtensionEmbeddingBackend: void access$setGlobalInstance$cp(androidx.window.embedding.ExtensionEmbeddingBackend)
androidx.window.embedding.ExtensionEmbeddingBackend: void registerRule(androidx.window.embedding.EmbeddingRule)
androidx.window.embedding.ActivityRule: ActivityRule(java.util.Set,boolean,int,kotlin.jvm.internal.DefaultConstructorMarker)
com.google.android.exoplayer2.extractor.avi.AviExtractor: void parseIdx1Body(com.google.android.exoplayer2.util.ParsableByteArray)
com.google.android.exoplayer2.source.dash.DefaultDashChunkSource: long getAdjustedSeekPositionUs(long,com.google.android.exoplayer2.SeekParameters)
androidx.window.core.Version$Companion: Version$Companion()
kotlin.coroutines.jvm.internal.BaseContinuationImpl: kotlin.coroutines.jvm.internal.CoroutineStackFrame getCallerFrame()
androidx.core.view.ViewCompat$Api19Impl: boolean isLaidOut(android.view.View)
com.google.android.exoplayer2.source.chunk.BundledChunkExtractor: com.google.android.exoplayer2.Format[] getSampleFormats()
com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor: boolean readSample(com.google.android.exoplayer2.extractor.ExtractorInput)
com.google.android.exoplayer2.source.smoothstreaming.DefaultSsChunkSource: long resolveTimeToLiveEdgeUs(long)
androidx.window.layout.SidecarWindowBackend$Companion: androidx.window.layout.ExtensionInterfaceCompat initAndVerifyExtension(android.content.Context)
io.flutter.embedding.engine.FlutterJNI: void removeEngineLifecycleListener(io.flutter.embedding.engine.FlutterEngine$EngineLifecycleListener)
androidx.window.layout.WindowMetricsCalculator$-CC: void reset()
androidx.window.layout.DisplayCompatHelperApi28: int safeInsetTop(android.view.DisplayCutout)
androidx.window.embedding.EmbeddingAdapter: java.util.function.Predicate translateIntentPredicates(java.util.Set)
com.google.common.collect.Maps$EntryFunction: com.google.common.collect.Maps$EntryFunction valueOf(java.lang.String)
com.google.android.exoplayer2.extractor.mp4.AtomParsers: void parseAudioSampleEntry(com.google.android.exoplayer2.util.ParsableByteArray,int,int,int,int,java.lang.String,boolean,com.google.android.exoplayer2.drm.DrmInitData,com.google.android.exoplayer2.extractor.mp4.AtomParsers$StsdData,int)
androidx.window.embedding.ExtensionEmbeddingBackend: void unregisterSplitListenerForActivity(androidx.core.util.Consumer)
io.flutter.embedding.engine.systemchannels.LifecycleChannel$AppLifecycleState: io.flutter.embedding.engine.systemchannels.LifecycleChannel$AppLifecycleState valueOf(java.lang.String)
com.google.common.collect.RegularImmutableMap: com.google.common.collect.ImmutableCollection createValues()
androidx.window.layout.HardwareFoldingFeature$Companion: HardwareFoldingFeature$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
androidx.core.view.ViewCompat$Api21Impl: androidx.core.view.WindowInsetsCompat getRootWindowInsets(android.view.View)
io.flutter.embedding.android.TransparencyMode: io.flutter.embedding.android.TransparencyMode[] values()
com.google.android.exoplayer2.source.hls.HlsChunkSource: long getAdjustedSeekPositionUs(long,com.google.android.exoplayer2.SeekParameters)
com.google.android.exoplayer2.extractor.avi.AviExtractor: void seek(long,long)
com.google.android.exoplayer2.source.dash.EventSampleStream: int readData(com.google.android.exoplayer2.FormatHolder,com.google.android.exoplayer2.decoder.DecoderInputBuffer,int)
com.google.android.exoplayer2.drm.DrmInitData: DrmInitData(android.os.Parcel)
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode[] values()
kotlin.jvm.internal.FunctionReferenceImpl: FunctionReferenceImpl(int,java.lang.Class,java.lang.String,java.lang.String,int)
androidx.collection.SimpleArrayMap: void allocArrays(int)
com.google.android.exoplayer2.ExoPlayerImplInternal: void maybeUpdateReadingPeriod()
com.google.android.exoplayer2.metadata.Metadata: com.google.android.exoplayer2.metadata.Metadata copyWithPresentationTimeUs(long)
androidx.window.layout.HardwareFoldingFeature$Type$Companion: androidx.window.layout.HardwareFoldingFeature$Type getHINGE()
com.google.android.exoplayer2.decoder.SimpleDecoder: void releaseInputBufferInternal(com.google.android.exoplayer2.decoder.DecoderInputBuffer)
com.google.android.exoplayer2.util.TimedValueQueue: void clearBufferOnTimeDiscontinuity(long)
kotlinx.coroutines.android.AndroidDispatcherFactory: int getLoadPriority()
androidx.window.R: R()
io.flutter.view.AccessibilityViewEmbedder: void setFlutterNodesTranslateBounds(android.view.accessibility.AccessibilityNodeInfo,android.graphics.Rect,android.view.accessibility.AccessibilityNodeInfo)
com.google.android.exoplayer2.video.MediaCodecVideoRenderer$Api26: boolean doesDisplaySupportDolbyVision(android.content.Context)
androidx.window.embedding.SplitRule: int getLayoutDirection()
androidx.window.embedding.SplitController: void access$setStaticSplitRules(androidx.window.embedding.SplitController,java.util.Set)
androidx.window.layout.SidecarAdapter$Companion: void setSidecarDisplayFeatures(androidx.window.sidecar.SidecarWindowLayoutInfo,java.util.List)
io.flutter.embedding.engine.FlutterJNI: void onBeginFrame()
com.google.android.exoplayer2.extractor.mp4.Track: com.google.android.exoplayer2.extractor.mp4.TrackEncryptionBox getSampleDescriptionEncryptionBox(int)
com.google.android.exoplayer2.audio.DefaultAudioSink: void reset()
androidx.window.embedding.ActivityFilter: boolean equals(java.lang.Object)
androidx.window.embedding.EmbeddingBackend: void setSplitRules(java.util.Set)
androidx.window.layout.WindowInfoTracker$-CC: void overrideDecorator(androidx.window.layout.WindowInfoTrackerDecorator)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: android.graphics.Matrix getFinalMatrix()
io.flutter.embedding.engine.FlutterJNI: void nativeDispatchSemanticsAction(long,int,int,java.nio.ByteBuffer,int)
com.google.common.collect.RegularImmutableList: java.lang.Object get(int)
com.google.android.exoplayer2.source.hls.HlsMediaPeriod: void release()
com.google.android.exoplayer2.upstream.DefaultAllocator: com.google.android.exoplayer2.upstream.Allocation allocate()
kotlin.jvm.internal.Lambda: int getArity()
androidx.core.app.RemoteActionCompatParcelizer: RemoteActionCompatParcelizer()
io.flutter.embedding.engine.FlutterJNI: void loadLibrary()
com.google.android.exoplayer2.decoder.SimpleDecoder: com.google.android.exoplayer2.decoder.DecoderInputBuffer dequeueInputBuffer()
com.google.android.exoplayer2.extractor.ts.SeiReader: void consume(long,com.google.android.exoplayer2.util.ParsableByteArray)
com.google.android.exoplayer2.source.CompositeSequenceableLoader: void reevaluateBuffer(long)
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: void accept(androidx.window.extensions.layout.WindowLayoutInfo)
androidx.window.layout.SidecarAdapter: boolean isEqualSidecarWindowLayoutInfo(androidx.window.sidecar.SidecarWindowLayoutInfo,androidx.window.sidecar.SidecarWindowLayoutInfo)
io.flutter.embedding.engine.FlutterJNI: void nativeMarkTextureFrameAvailable(long,long)
io.flutter.embedding.android.FlutterView: io.flutter.embedding.android.FlutterImageView getCurrentImageSurface()
com.google.android.exoplayer2.ExoPlayerImplInternal: void updateTrackSelectionPlaybackSpeed(float)
androidx.window.layout.WindowInfoTrackerImpl: kotlinx.coroutines.flow.Flow windowLayoutInfo(android.app.Activity)
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1$invokeSuspend$$inlined$collect$1: WindowInfoTrackerCallbackAdapter$addListener$1$1$invokeSuspend$$inlined$collect$1(androidx.core.util.Consumer)
androidx.window.layout.WindowMetrics: WindowMetrics(android.graphics.Rect)
com.google.android.exoplayer2.ExoPlayerImplInternal: long getMaxRendererReadPositionUs()
androidx.window.core.Version: androidx.window.core.Version access$getVERSION_0_1$cp()
com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void onLoadCanceled(com.google.android.exoplayer2.source.ProgressiveMediaPeriod$ExtractingLoadable,long,long,boolean)
com.google.android.exoplayer2.drm.DrmInitData: com.google.android.exoplayer2.drm.DrmInitData$SchemeData get(int)
com.google.android.exoplayer2.source.hls.HlsSampleStreamWrapper: boolean isReady(int)
com.google.android.exoplayer2.ExoPlayerImplInternal: boolean hasReadingPeriodFinishedReading()
com.google.android.exoplayer2.source.hls.HlsMediaPeriod: boolean onPlaylistError(android.net.Uri,com.google.android.exoplayer2.upstream.LoadErrorHandlingPolicy$LoadErrorInfo,boolean)
com.google.android.exoplayer2.source.TrackGroup: boolean equals(java.lang.Object)
com.google.android.exoplayer2.MediaPeriodHolder: com.google.android.exoplayer2.trackselection.TrackSelectorResult selectTracks(float,com.google.android.exoplayer2.Timeline)
androidx.window.core.Version$Companion: androidx.window.core.Version getUNKNOWN()
com.google.android.exoplayer2.trackselection.BaseTrackSelection: com.google.android.exoplayer2.Format getFormat(int)
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: void detachFromGLContext()
io.flutter.embedding.engine.FlutterJNI: void ensureRunningOnMainThread()
androidx.core.view.ViewCompat$Api21Impl: boolean dispatchNestedPreScroll(android.view.View,int,int,int[],int[])
com.google.common.collect.RegularImmutableSet: boolean contains(java.lang.Object)
androidx.window.embedding.ActivityRule: boolean equals(java.lang.Object)
com.google.android.exoplayer2.extractor.ts.DvbSubtitleReader: void packetFinished()
io.flutter.embedding.engine.FlutterJNI: void setLocalizationPlugin(io.flutter.plugin.localization.LocalizationPlugin)
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: void getTransformMatrix(float[])
androidx.window.layout.WindowMetricsCalculatorCompat: android.graphics.Point getRealSizeForDisplay$window_release(android.view.Display)
io.flutter.embedding.engine.FlutterJNI: void attachToNative()
androidx.window.embedding.SplitController: void initialize(android.content.Context,int)
androidx.window.core.Bounds: java.lang.String toString()
com.google.common.collect.RegularImmutableSet: int copyIntoArray(java.lang.Object[],int)
androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State valueOf(java.lang.String)
androidx.window.layout.SidecarWindowBackend: void registerLayoutChangeCallback(android.app.Activity,java.util.concurrent.Executor,androidx.core.util.Consumer)
androidx.core.view.ViewCompat$Api21Impl: android.content.res.ColorStateList getBackgroundTintList(android.view.View)
com.google.android.exoplayer2.source.chunk.ChunkSampleStream: boolean continueLoading(long)
io.flutter.embedding.engine.FlutterJNI: boolean nativeFlutterTextUtilsIsEmoji(int)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean access$300(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
kotlin.jvm.internal.CallableReference: java.lang.Object callBy(java.util.Map)
androidx.window.layout.HardwareFoldingFeature$Type: java.lang.String toString()
com.google.android.exoplayer2.source.hls.HlsSampleStreamWrapper: void discardBuffer(long,boolean)
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.FlutterJNI nativeSpawn(long,java.lang.String,java.lang.String,java.lang.String,java.util.List)
kotlin.jvm.internal.FunctionReference: java.lang.String toString()
com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void onLoaderReleased()
com.google.android.exoplayer2.source.CompositeSequenceableLoader: long getBufferedPositionUs()
androidx.window.embedding.SplitRule: boolean checkParentMetrics(android.view.WindowMetrics)
com.google.android.exoplayer2.source.smoothstreaming.DefaultSsChunkSource: DefaultSsChunkSource(com.google.android.exoplayer2.upstream.LoaderErrorThrower,com.google.android.exoplayer2.source.smoothstreaming.manifest.SsManifest,int,com.google.android.exoplayer2.trackselection.ExoTrackSelection,com.google.android.exoplayer2.upstream.DataSource)
kotlin.coroutines.jvm.internal.SuspendLambda: int getArity()
com.google.android.exoplayer2.ExoPlayerImplInternal: void enableRenderer(int,boolean)
com.google.android.exoplayer2.metadata.id3.ChapterTocFrame: ChapterTocFrame(android.os.Parcel)
kotlin.jvm.internal.FunctionReference: int getArity()
io.flutter.embedding.android.FlutterImageView: io.flutter.embedding.engine.renderer.FlutterRenderer getAttachedRenderer()
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: void removeWindowLayoutInfoListener(androidx.core.util.Consumer)
com.google.common.collect.ImmutableMap$Builder: void ensureCapacity(int)
io.flutter.embedding.engine.FlutterJNI: void nativeRunBundleAndSnapshotFromLibrary(long,java.lang.String,java.lang.String,java.lang.String,android.content.res.AssetManager,java.util.List)
com.google.android.exoplayer2.metadata.id3.ChapterTocFrame: void writeToParcel(android.os.Parcel,int)
io.flutter.embedding.engine.FlutterJNI: void handlePlatformMessageResponse(int,java.nio.ByteBuffer)
androidx.window.embedding.ExtensionEmbeddingBackend: androidx.window.embedding.EmbeddingInterfaceCompat getEmbeddingExtension()
androidx.core.view.ViewCompat$Api16Impl: void setImportantForAccessibility(android.view.View,int)
com.google.android.exoplayer2.drm.DrmInitData: void writeToParcel(android.os.Parcel,int)
io.flutter.plugin.platform.SingleViewPresentation: void onCreate(android.os.Bundle)
com.google.android.exoplayer2.source.hls.HlsChunkSource: com.google.android.exoplayer2.source.chunk.MediaChunkIterator[] createMediaChunkIterators(com.google.android.exoplayer2.source.hls.HlsMediaChunk,long)
kotlin.coroutines.jvm.internal.BaseContinuationImpl: java.lang.String toString()
androidx.window.layout.HardwareFoldingFeature: int hashCode()
com.google.android.exoplayer2.source.hls.HlsSampleStreamWrapper: void buildTracksFromSampleStreams()
io.flutter.embedding.engine.FlutterJNI: void unregisterTexture(long)
androidx.core.view.ViewCompat$Api16Impl: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider(android.view.View)
com.google.android.exoplayer2.source.ProgressiveMediaPeriod: int readData(int,com.google.android.exoplayer2.FormatHolder,com.google.android.exoplayer2.decoder.DecoderInputBuffer,int)
io.flutter.embedding.engine.FlutterJNI: void nativeNotifyLowMemoryWarning(long)
kotlin.jvm.internal.CallableReference: boolean isSuspend()
io.flutter.view.AccessibilityViewEmbedder: android.view.View platformViewOfNode(int)
com.google.android.exoplayer2.source.TrackGroup: com.google.android.exoplayer2.Format getFormat(int)
androidx.core.app.CoreComponentFactory: CoreComponentFactory()
androidx.core.view.ViewCompat$Api16Impl: int getMinimumWidth(android.view.View)
com.google.android.exoplayer2.video.spherical.SphericalGLSurfaceView: android.view.Surface getVideoSurface()
com.google.android.exoplayer2.source.ads.AdPlaybackState: java.lang.String toString()
io.flutter.embedding.android.FlutterView: io.flutter.embedding.engine.FlutterEngine getAttachedFlutterEngine()
io.flutter.embedding.engine.FlutterJNI: android.graphics.Bitmap decodeImage(java.nio.ByteBuffer,long)
androidx.window.embedding.SplitController$Companion: void initialize(android.content.Context,int)
androidx.window.embedding.ActivityRule: androidx.window.embedding.ActivityRule plus$window_release(androidx.window.embedding.ActivityFilter)
androidx.window.layout.SidecarCompat$DistinctSidecarElementCallback: SidecarCompat$DistinctSidecarElementCallback(androidx.window.layout.SidecarAdapter,androidx.window.sidecar.SidecarInterface$SidecarCallback)
io.flutter.embedding.engine.FlutterJNI: FlutterJNI()
androidx.window.core.Version: boolean equals(java.lang.Object)
androidx.window.embedding.EmbeddingAdapter: boolean translateParentMetricsPredicate$lambda-4(androidx.window.embedding.SplitRule,android.view.WindowMetrics)
kotlin.coroutines.jvm.internal.SuspendLambda: SuspendLambda(int)
kotlinx.coroutines.internal.ArrayQueue: void addLast(java.lang.Object)
com.google.common.collect.RegularImmutableList: java.lang.Object[] internalArray()
androidx.window.layout.WindowMetricsCalculatorCompat: void getRectSizeFromDisplay(android.app.Activity,android.graphics.Rect)
io.flutter.embedding.engine.FlutterJNI: void onSurfaceCreated(android.view.Surface)
androidx.window.embedding.SplitController: androidx.window.embedding.SplitController access$getGlobalInstance$cp()
androidx.window.core.Version: int getMajor()
androidx.window.core.Version$bigInteger$2: Version$bigInteger$2(androidx.window.core.Version)
io.flutter.embedding.engine.FlutterJNI: void onEndFrame()
io.flutter.embedding.engine.FlutterJNI: void lambda$decodeImage$0(long,android.graphics.ImageDecoder,android.graphics.ImageDecoder$ImageInfo,android.graphics.ImageDecoder$Source)
com.google.android.exoplayer2.PlaylistTimeline: PlaylistTimeline(java.util.Collection,com.google.android.exoplayer2.source.ShuffleOrder)
com.google.android.exoplayer2.source.hls.HlsMediaPeriod: long getAdjustedSeekPositionUs(long,com.google.android.exoplayer2.SeekParameters)
com.google.android.exoplayer2.source.hls.HlsSampleStreamWrapper: boolean finishedReadingChunk(com.google.android.exoplayer2.source.hls.HlsMediaChunk)
com.google.android.exoplayer2.source.dash.DashMediaPeriod: void release()
io.flutter.embedding.engine.FlutterJNI: void nativeUpdateDisplayMetrics(long)
io.flutter.embedding.android.RenderMode: io.flutter.embedding.android.RenderMode valueOf(java.lang.String)
com.google.android.exoplayer2.decoder.SimpleDecoder: void releaseOutputBufferInternal(com.google.android.exoplayer2.decoder.DecoderOutputBuffer)
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: SurfaceTextureWrapper(android.graphics.SurfaceTexture)
io.flutter.embedding.engine.FlutterJNI: void nativeLoadDartDeferredLibrary(long,int,java.lang.String[])
androidx.lifecycle.CompositeGeneratedAdaptersObserver: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event valueOf(java.lang.String)
androidx.window.core.Bounds: android.graphics.Rect toRect()
androidx.core.view.ViewCompat$Api19Impl: int getAccessibilityLiveRegion(android.view.View)
io.flutter.embedding.engine.FlutterJNI: void nativeRegisterTexture(long,long,java.lang.ref.WeakReference)
androidx.window.embedding.SplitRule: int getMinSmallestWidth()
io.flutter.embedding.engine.FlutterJNI: void nativeUnregisterTexture(long,long)
androidx.core.view.ViewCompat$Api16Impl: boolean getFitsSystemWindows(android.view.View)
androidx.window.core.Version: int hashCode()
androidx.window.embedding.ActivityStack: ActivityStack(java.util.List,boolean,int,kotlin.jvm.internal.DefaultConstructorMarker)
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: void invokeSuspend$lambda-0(kotlinx.coroutines.channels.Channel,androidx.window.layout.WindowLayoutInfo)
com.google.android.exoplayer2.source.dash.DashMediaPeriod: long seekToUs(long)
com.google.android.exoplayer2.source.dash.manifest.UrlTemplate: java.lang.String buildUri(java.lang.String,long,int,long)
com.google.android.exoplayer2.trackselection.MappingTrackSelector$MappedTrackInfo: int getAdaptiveSupport(int,int,boolean)
kotlinx.coroutines.internal.ArrayQueue: java.lang.Object removeFirstOrNull()
com.google.android.exoplayer2.source.hls.HlsSampleStreamWrapper: boolean continueLoading(long)
androidx.core.view.ViewCompat$Api19Impl: boolean isAttachedToWindow(android.view.View)
io.flutter.view.AccessibilityBridge$StringAttributeType: io.flutter.view.AccessibilityBridge$StringAttributeType valueOf(java.lang.String)
kotlin.jvm.internal.CallableReference: java.util.List getAnnotations()
io.flutter.embedding.engine.FlutterJNI: void nativeUpdateRefreshRate(float)
io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness: io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness[] values()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback: void onPrepare(android.view.WindowInsetsAnimation)
kotlin.jvm.internal.FunctionReference: boolean equals(java.lang.Object)
io.flutter.embedding.engine.FlutterJNI: java.lang.String[] computePlatformResolvedLocale(java.lang.String[])
io.flutter.embedding.engine.FlutterJNI: void init(android.content.Context,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,long)
androidx.window.embedding.MatcherUtils: boolean areActivityOrIntentComponentsMatching$window_release(android.app.Activity,android.content.ComponentName)
io.flutter.embedding.android.FlutterSurfaceView: io.flutter.embedding.engine.renderer.FlutterRenderer getAttachedRenderer()
com.google.android.exoplayer2.MediaPeriodHolder: long applyTrackSelection(com.google.android.exoplayer2.trackselection.TrackSelectorResult,long,boolean,boolean[])
io.flutter.embedding.engine.FlutterJNI: void nativeDeferredComponentInstallFailure(int,java.lang.String,boolean)
io.flutter.embedding.engine.FlutterJNI: void notifyLowMemoryWarning()
androidx.window.layout.ActivityCompatHelperApi30: android.graphics.Rect maximumWindowBounds(android.app.Activity)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: void remove()
com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void maybeFinishPrepare()
androidx.window.embedding.EmbeddingCompat: EmbeddingCompat()
io.flutter.view.FlutterCallbackInformation: FlutterCallbackInformation(java.lang.String,java.lang.String,java.lang.String)
androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper: void accept(java.util.List)
com.google.android.exoplayer2.source.hls.HlsMediaPeriod: boolean continueLoading(long)
androidx.window.embedding.EmbeddingAdapter: java.util.function.Predicate translateParentMetricsPredicate(androidx.window.embedding.SplitRule)
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType[] values()
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType valueOf(java.lang.String)
androidx.window.embedding.EmbeddingInterfaceCompat: void setSplitRules(java.util.Set)
androidx.window.core.Version: int getMinor()
com.google.android.exoplayer2.video.spherical.SphericalGLSurfaceView: com.google.android.exoplayer2.video.VideoFrameMetadataListener getVideoFrameMetadataListener()
androidx.window.core.Bounds: boolean isZero()
androidx.window.layout.ExtensionWindowLayoutInfoBackend: ExtensionWindowLayoutInfoBackend(androidx.window.extensions.layout.WindowLayoutComponent)
io.flutter.embedding.engine.FlutterJNI: void invokePlatformMessageEmptyResponseCallback(int)
androidx.core.view.ViewCompat$Api16Impl: void requestFitSystemWindows(android.view.View)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean access$102(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback,boolean)
io.flutter.view.AccessibilityViewEmbedder: void setFlutterNodeParent(android.view.accessibility.AccessibilityNodeInfo,android.view.View,android.view.accessibility.AccessibilityNodeInfo)
com.google.android.exoplayer2.mediacodec.MediaCodecUtil$MediaCodecListCompatV21: android.media.MediaCodecInfo getCodecInfoAt(int)
androidx.window.layout.WindowInfoTrackerImpl$Companion: WindowInfoTrackerImpl$Companion()
io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type: io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type valueOf(java.lang.String)
kotlinx.coroutines.internal.ThreadSafeHeap: void siftDownFrom(int)
io.flutter.embedding.engine.plugins.lifecycle.HiddenLifecycleReference: androidx.lifecycle.Lifecycle getLifecycle()
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: void pushClipRect(int,int,int,int)
com.google.android.exoplayer2.source.hls.HlsSampleStreamWrapper: void release()
com.google.android.exoplayer2.extractor.mp4.Mp4Extractor: int getTrackIndexOfNextReadSample(long)
androidx.window.embedding.EmbeddingInterfaceCompat: void setEmbeddingCallback(androidx.window.embedding.EmbeddingInterfaceCompat$EmbeddingCallbackInterface)
io.flutter.embedding.engine.FlutterJNI: void onSurfaceChanged(int,int)
androidx.window.embedding.MatcherUtils: MatcherUtils()
io.flutter.embedding.engine.FlutterJNI: void addIsDisplayingFlutterUiListener(io.flutter.embedding.engine.renderer.FlutterUiDisplayListener)
androidx.core.view.ViewCompat$Api28Impl: boolean isAccessibilityHeading(android.view.View)
com.google.android.exoplayer2.source.chunk.BaseMediaChunkOutput: int[] getWriteIndices()
androidx.window.layout.ActivityCompatHelperApi30: android.graphics.Rect currentWindowBounds(android.app.Activity)
androidx.window.layout.SidecarWindowBackend: void callbackRemovedForActivity(android.app.Activity)
androidx.window.embedding.SplitRuleParser: SplitRuleParser()
androidx.window.layout.SidecarWindowBackend: SidecarWindowBackend(androidx.window.layout.ExtensionInterfaceCompat)
io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness: io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness valueOf(java.lang.String)
com.google.android.exoplayer2.ExoPlayerImplInternal: void handlePlaybackParameters(com.google.android.exoplayer2.PlaybackParameters,float,boolean,boolean)
com.google.android.exoplayer2.source.smoothstreaming.SsMediaPeriod: long seekToUs(long)
com.google.android.exoplayer2.source.hls.HlsSampleStreamWrapper: long getBufferedPositionUs()
androidx.window.embedding.ExtensionEmbeddingBackend: ExtensionEmbeddingBackend(androidx.window.embedding.EmbeddingInterfaceCompat)
kotlinx.coroutines.android.AndroidExceptionPreHandler: java.lang.reflect.Method preHandler()
androidx.window.layout.SidecarAdapter: boolean isEqualSidecarDisplayFeature(androidx.window.sidecar.SidecarDisplayFeature,androidx.window.sidecar.SidecarDisplayFeature)
io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type: io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type[] values()
com.google.android.exoplayer2.mediacodec.SynchronousMediaCodecAdapter: java.nio.ByteBuffer getOutputBuffer(int)
io.flutter.embedding.android.FlutterSplashView$SavedState: android.os.Bundle access$702(io.flutter.embedding.android.FlutterSplashView$SavedState,android.os.Bundle)
io.flutter.embedding.android.TransparencyMode: io.flutter.embedding.android.TransparencyMode valueOf(java.lang.String)
com.google.android.exoplayer2.audio.DefaultAudioSink: void flushAudioProcessors()
kotlin.jvm.internal.CallableReference: boolean isAbstract()
com.google.android.exoplayer2.PlaylistTimeline: com.google.android.exoplayer2.Timeline getTimelineByChildIndex(int)
androidx.window.embedding.EmbeddingAdapter: boolean translateActivityIntentPredicates$lambda-3(androidx.window.embedding.EmbeddingAdapter,java.util.Set,android.util.Pair)
android.support.v4.graphics.drawable.IconCompatParcelizer: void write(androidx.core.graphics.drawable.IconCompat,androidx.versionedparcelable.VersionedParcel)
io.flutter.embedding.engine.FlutterJNI: boolean isCodePointRegionalIndicator(int)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView: void setOnDescendantFocusChangeListener(android.view.View$OnFocusChangeListener)
com.google.android.exoplayer2.ExoPlayerImpl: ExoPlayerImpl(com.google.android.exoplayer2.ExoPlayer$Builder,com.google.android.exoplayer2.Player)
androidx.window.layout.SidecarCompat: java.util.Map access$getWindowListenerRegisteredContexts$p(androidx.window.layout.SidecarCompat)
com.google.android.exoplayer2.metadata.Metadata: com.google.android.exoplayer2.metadata.Metadata copyWithAppendedEntries(com.google.android.exoplayer2.metadata.Metadata$Entry[])
com.google.android.exoplayer2.metadata.Metadata: boolean equals(java.lang.Object)
kotlin.jvm.internal.CallableReference: java.lang.String getSignature()
androidx.window.embedding.SplitRule: boolean equals(java.lang.Object)
com.google.android.exoplayer2.source.dash.DefaultDashChunkSource: void updateManifest(com.google.android.exoplayer2.source.dash.manifest.DashManifest,int)
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: android.app.Activity getActivity()
androidx.window.embedding.SplitPairFilter: boolean matchesActivityIntentPair(android.app.Activity,android.content.Intent)
androidx.window.core.Version: androidx.window.core.Version access$getVERSION_1_0$cp()
androidx.window.embedding.SplitController: void registerRule(androidx.window.embedding.EmbeddingRule)
com.google.android.exoplayer2.decoder.SimpleDecoder: boolean decode()
com.google.android.exoplayer2.upstream.RawResourceDataSource: android.net.Uri buildRawResourceUri(int)
androidx.window.layout.WindowLayoutInfo: int hashCode()
androidx.window.embedding.SplitController: boolean isSplitSupported()
android.support.v4.app.RemoteActionCompatParcelizer: androidx.core.app.RemoteActionCompat read(androidx.versionedparcelable.VersionedParcel)
kotlin.reflect.KVisibility: kotlin.reflect.KVisibility[] values()
com.google.android.exoplayer2.ExoPlayerImplInternal: void updateLoadControlTrackSelection(com.google.android.exoplayer2.source.TrackGroupArray,com.google.android.exoplayer2.trackselection.TrackSelectorResult)
com.google.android.exoplayer2.source.hls.HlsMediaPeriod: long selectTracks(com.google.android.exoplayer2.trackselection.ExoTrackSelection[],boolean[],com.google.android.exoplayer2.source.SampleStream[],boolean[],long)
com.google.android.exoplayer2.source.chunk.BundledChunkExtractor: com.google.android.exoplayer2.extractor.TrackOutput track(int,int)
io.flutter.embedding.engine.FlutterJNI: void setAccessibilityFeatures(int)
androidx.window.embedding.SplitPairFilter: int hashCode()
io.flutter.view.AccessibilityViewEmbedder: boolean onAccessibilityHoverEvent(int,android.view.MotionEvent)
io.flutter.embedding.engine.FlutterJNI: void nativeSurfaceCreated(long,android.view.Surface)
io.flutter.embedding.engine.FlutterJNI: void setAsyncWaitForVsyncDelegate(io.flutter.embedding.engine.FlutterJNI$AsyncWaitForVsyncDelegate)
com.google.android.exoplayer2.text.ttml.TtmlNode: void applyStyleToOutput(java.util.Map,com.google.android.exoplayer2.text.Cue$Builder,int,int,int)
com.google.android.exoplayer2.decoder.SimpleDecoder: void setInitialInputBufferSize(int)
androidx.core.view.ViewCompat$Api28Impl: void setScreenReaderFocusable(android.view.View,boolean)
androidx.window.core.Version: java.lang.String getDescription()
androidx.window.embedding.ExtensionEmbeddingBackend$Companion: androidx.window.embedding.EmbeddingInterfaceCompat initAndVerifyEmbeddingExtension()
com.google.android.exoplayer2.MediaPeriodHolder: void enableTrackSelectionsInResult()
com.google.android.exoplayer2.metadata.Metadata: void writeToParcel(android.os.Parcel,int)
androidx.window.layout.DisplayCompatHelperApi28: int safeInsetLeft(android.view.DisplayCutout)
androidx.window.embedding.SplitRule$Api30Impl: android.graphics.Rect getBounds(android.view.WindowMetrics)
com.google.android.exoplayer2.metadata.id3.ChapterFrame: boolean equals(java.lang.Object)
kotlinx.coroutines.android.AndroidExceptionPreHandler: AndroidExceptionPreHandler()
androidx.window.layout.SidecarCompat: void register(android.os.IBinder,android.app.Activity)
io.flutter.plugin.platform.SingleViewPresentation: SingleViewPresentation(android.content.Context,android.view.Display,io.flutter.plugin.platform.PlatformView,io.flutter.plugin.platform.AccessibilityEventsDelegate,int,android.view.View$OnFocusChangeListener)
androidx.window.layout.WindowLayoutInfo: WindowLayoutInfo(java.util.List)
androidx.window.layout.DisplayCompatHelperApi28: int safeInsetRight(android.view.DisplayCutout)
androidx.collection.ArrayMap$1: java.lang.Object colGetEntry(int,int)
androidx.window.embedding.ExtensionEmbeddingBackend: void setSplitRules(java.util.Set)
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest$RequestedDisplayMode: io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest$RequestedDisplayMode valueOf(java.lang.String)
com.google.common.collect.ImmutableCollection$ArrayBasedBuilder: com.google.common.collect.ImmutableCollection$ArrayBasedBuilder add(java.lang.Object)
androidx.window.embedding.SplitPairRule: boolean equals(java.lang.Object)
androidx.core.view.ViewCompat$Api16Impl: int getWindowSystemUiVisibility(android.view.View)
androidx.window.embedding.SplitPairRule: java.util.Set getFilters()
androidx.window.embedding.ActivityRule: ActivityRule(java.util.Set,boolean)
com.google.android.exoplayer2.drm.DrmInitData: DrmInitData(java.lang.String,boolean,com.google.android.exoplayer2.drm.DrmInitData$SchemeData[])
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView: android.graphics.Matrix getPlatformViewMatrix()
kotlin.coroutines.intrinsics.CoroutineSingletons: kotlin.coroutines.intrinsics.CoroutineSingletons valueOf(java.lang.String)
androidx.window.layout.ExtensionInterfaceCompat: void onWindowLayoutChangeListenerRemoved(android.app.Activity)
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: java.lang.Object invoke(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.Continuation)
com.google.android.exoplayer2.source.smoothstreaming.SsMediaSource: void processManifest()
io.flutter.embedding.engine.FlutterJNI: void updateRefreshRate()
androidx.core.view.ViewCompat$Api21Impl: void setOnApplyWindowInsetsListener(android.view.View,androidx.core.view.OnApplyWindowInsetsListener)
com.google.android.exoplayer2.audio.DefaultAudioSink: void processBuffers(long)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback: ImeSyncDeferringInsetsCallback$AnimationCallback(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
kotlin.jvm.internal.CallableReference: kotlin.reflect.KType getReturnType()
io.flutter.embedding.engine.FlutterJNI: void nativeInvokePlatformMessageEmptyResponseCallback(long,int)
androidx.window.embedding.SplitPairFilter: android.content.ComponentName getPrimaryActivityName()
androidx.window.layout.WindowMetricsCalculatorCompat: android.graphics.Rect computeWindowBoundsN$window_release(android.app.Activity)
androidx.window.layout.WindowInfoTracker: kotlinx.coroutines.flow.Flow windowLayoutInfo(android.app.Activity)
androidx.window.embedding.SplitController: void addSplitListener(android.app.Activity,java.util.concurrent.Executor,androidx.core.util.Consumer)
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState valueOf(java.lang.String)
com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor: void initExtraTracks()
kotlin.jvm.internal.FunctionReference: kotlin.reflect.KCallable getReflected()
kotlin.coroutines.jvm.internal.ContinuationImpl: ContinuationImpl(kotlin.coroutines.Continuation,kotlin.coroutines.CoroutineContext)
androidx.core.view.ViewCompat$Api20Impl: android.view.WindowInsets dispatchApplyWindowInsets(android.view.View,android.view.WindowInsets)
com.google.android.exoplayer2.source.hls.HlsSampleStreamWrapper: int readData(int,com.google.android.exoplayer2.FormatHolder,com.google.android.exoplayer2.decoder.DecoderInputBuffer,int)
com.google.common.collect.ImmutableMap$Builder: void sortEntries()
androidx.window.layout.ExtensionInterfaceCompat: void setExtensionCallback(androidx.window.layout.ExtensionInterfaceCompat$ExtensionCallbackInterface)
androidx.core.view.ViewCompat$Api16Impl: int getImportantForAccessibility(android.view.View)
com.google.android.exoplayer2.source.dash.DashMediaPeriod: void updateManifest(com.google.android.exoplayer2.source.dash.manifest.DashManifest,int)
androidx.window.layout.WindowMetricsCalculatorCompat: int getNavigationBarHeight(android.content.Context)
io.flutter.embedding.engine.FlutterJNI: void dispatchSemanticsAction(int,int,java.nio.ByteBuffer,int)
androidx.collection.SimpleArrayMap: java.lang.Object setValueAt(int,java.lang.Object)
androidx.window.embedding.SplitPairFilter: java.lang.String toString()
androidx.window.embedding.SplitRule: int hashCode()
io.flutter.embedding.engine.FlutterJNI: void onSurfaceWindowChanged(android.view.Surface)
io.flutter.embedding.engine.FlutterJNI: void nativeSurfaceDestroyed(long)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$ImeVisibleListener access$500(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
com.google.android.exoplayer2.ExoPlayerImplInternal: void setForegroundModeInternal(boolean,java.util.concurrent.atomic.AtomicBoolean)
androidx.window.layout.HardwareFoldingFeature$Type: HardwareFoldingFeature$Type(java.lang.String)
com.google.android.exoplayer2.video.spherical.SphericalGLSurfaceView: com.google.android.exoplayer2.video.spherical.CameraMotionListener getCameraMotionListener()
com.google.common.collect.ImmutableCollection$ArrayBasedBuilder: void getReadyToExpandTo(int)
com.google.android.exoplayer2.ExoPlayerImplInternal: void resetRendererPosition(long)
androidx.window.embedding.SplitPlaceholderRule: int hashCode()
androidx.core.app.RemoteActionCompatParcelizer: void write(androidx.core.app.RemoteActionCompat,androidx.versionedparcelable.VersionedParcel)
androidx.window.layout.FoldingFeature$State$Companion: FoldingFeature$State$Companion()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: int access$200(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.View$OnApplyWindowInsetsListener getInsetsListener()
com.google.android.exoplayer2.ExoPlayerImplInternal: void setAllRendererStreamsFinal(long)
com.google.android.exoplayer2.source.hls.HlsMediaPeriod: void buildAndPrepareSampleStreamWrappers(long)
com.google.android.exoplayer2.source.dash.DashMediaPeriod: DashMediaPeriod(int,com.google.android.exoplayer2.source.dash.manifest.DashManifest,com.google.android.exoplayer2.source.dash.BaseUrlExclusionList,int,com.google.android.exoplayer2.source.dash.DashChunkSource$Factory,com.google.android.exoplayer2.upstream.TransferListener,com.google.android.exoplayer2.drm.DrmSessionManager,com.google.android.exoplayer2.drm.DrmSessionEventListener$EventDispatcher,com.google.android.exoplayer2.upstream.LoadErrorHandlingPolicy,com.google.android.exoplayer2.source.MediaSourceEventListener$EventDispatcher,long,com.google.android.exoplayer2.upstream.LoaderErrorThrower,com.google.android.exoplayer2.upstream.Allocator,com.google.android.exoplayer2.source.CompositeSequenceableLoaderFactory,com.google.android.exoplayer2.source.dash.PlayerEmsgHandler$PlayerEmsgCallback,com.google.android.exoplayer2.analytics.PlayerId)
com.google.android.exoplayer2.source.SampleQueue: int peekSampleMetadata(com.google.android.exoplayer2.FormatHolder,com.google.android.exoplayer2.decoder.DecoderInputBuffer,boolean,boolean,com.google.android.exoplayer2.source.SampleQueue$SampleExtrasHolder)
com.google.android.exoplayer2.source.SampleQueue: void commitSample(long,int,long,int,com.google.android.exoplayer2.extractor.TrackOutput$CryptoData)
com.google.android.exoplayer2.source.hls.HlsChunkSource: boolean obtainsChunksForPlaylist(android.net.Uri)
androidx.core.view.ViewCompat$Api21Impl: boolean dispatchNestedScroll(android.view.View,int,int,int,int,int[])
kotlin.coroutines.jvm.internal.BaseContinuationImpl: void resumeWith(java.lang.Object)
androidx.window.layout.SidecarCompat$DistinctElementCallback: SidecarCompat$DistinctElementCallback(androidx.window.layout.ExtensionInterfaceCompat$ExtensionCallbackInterface)
androidx.window.layout.WindowMetricsCalculator: androidx.window.layout.WindowMetrics computeMaximumWindowMetrics(android.app.Activity)
kotlin.coroutines.jvm.internal.BaseContinuationImpl: java.lang.Object invokeSuspend(java.lang.Object)
io.flutter.embedding.engine.FlutterJNI: void nativeUpdateJavaAssetManager(long,android.content.res.AssetManager,java.lang.String)
androidx.window.layout.HardwareFoldingFeature: boolean equals(java.lang.Object)
com.google.common.collect.Maps$EntryFunction: com.google.common.collect.Maps$EntryFunction[] values()
androidx.window.layout.DisplayCompatHelperApi28: int safeInsetBottom(android.view.DisplayCutout)
androidx.window.layout.ExtensionWindowLayoutInfoBackend: void registerLayoutChangeCallback(android.app.Activity,java.util.concurrent.Executor,androidx.core.util.Consumer)
com.google.android.exoplayer2.video.spherical.SphericalGLSurfaceView: void setUseSensorRotation(boolean)
com.google.android.exoplayer2.metadata.Metadata: int length()
kotlinx.coroutines.internal.ThreadSafeHeap: kotlinx.coroutines.internal.ThreadSafeHeapNode[] realloc()
com.google.android.exoplayer2.ExoPlayerImplInternal: void stopRenderers()
io.flutter.embedding.engine.FlutterJNI: boolean isCodePointEmojiModifierBase(int)
com.google.android.exoplayer2.mediacodec.MediaCodecUtil$MediaCodecListCompatV21: void ensureMediaCodecInfosInitialized()
com.google.common.base.AbstractIterator$State: com.google.common.base.AbstractIterator$State[] values()
androidx.window.core.Version: java.math.BigInteger getBigInteger()
androidx.window.layout.WindowMetricsCalculator$Companion$reset$1: androidx.window.layout.WindowMetricsCalculator invoke(androidx.window.layout.WindowMetricsCalculator)
androidx.window.embedding.SplitRule$Api30Impl: SplitRule$Api30Impl()
androidx.window.layout.WindowMetricsCalculatorDecorator: androidx.window.layout.WindowMetricsCalculator decorate(androidx.window.layout.WindowMetricsCalculator)
com.google.android.exoplayer2.source.CompositeSequenceableLoader: long getNextLoadPositionUs()
com.google.android.exoplayer2.source.ProgressiveMediaPeriod: long getBufferedPositionUs()
com.google.android.exoplayer2.drm.DrmInitData: boolean equals(java.lang.Object)
androidx.window.layout.WindowMetricsCalculatorCompat: android.graphics.Rect computeWindowBoundsP$window_release(android.app.Activity)
io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType: io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType valueOf(java.lang.String)
com.google.android.exoplayer2.source.ProgressiveMediaPeriod: boolean isReady(int)
io.flutter.embedding.engine.FlutterJNI: void setDeferredComponentManager(io.flutter.embedding.engine.deferredcomponents.DeferredComponentManager)
androidx.window.layout.WindowMetricsCalculatorCompat: androidx.window.layout.WindowMetrics computeMaximumWindowMetrics(android.app.Activity)
androidx.window.layout.ActivityCompatHelperApi30: ActivityCompatHelperApi30()
androidx.window.embedding.ActivityFilter: android.content.ComponentName getComponentName()
com.google.android.exoplayer2.source.ProgressiveMediaPeriod: long seekToUs(long)
androidx.core.view.ViewCompat$Api28Impl: void setAccessibilityPaneTitle(android.view.View,java.lang.CharSequence)
com.google.android.exoplayer2.text.cea.Cea708Decoder: void handleC1Command(int)
androidx.window.layout.SidecarWindowBackend: androidx.window.layout.SidecarWindowBackend access$getGlobalInstance$cp()
androidx.window.embedding.SplitInfo: boolean contains(android.app.Activity)
com.google.android.exoplayer2.source.ProgressiveMediaPeriod: com.google.android.exoplayer2.extractor.TrackOutput prepareTrackOutput(com.google.android.exoplayer2.source.ProgressiveMediaPeriod$TrackId)
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay[] values()
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)
androidx.window.layout.SidecarWindowBackend: void getWindowLayoutChangeCallbacks$annotations()
androidx.window.embedding.ActivityFilter: boolean matchesActivity(android.app.Activity)
com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList build()
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: void addListener(java.util.concurrent.Executor,androidx.core.util.Consumer,kotlinx.coroutines.flow.Flow)
androidx.window.embedding.SplitPairRule: int hashCode()
androidx.window.layout.DisplayFeature: android.graphics.Rect getBounds()
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: void setLastInfo(androidx.window.layout.WindowLayoutInfo)
androidx.core.view.ViewCompat$Api16Impl: boolean performAccessibilityAction(android.view.View,int,android.os.Bundle)
com.google.android.exoplayer2.source.smoothstreaming.SsMediaPeriod: void discardBuffer(long,boolean)
androidx.core.graphics.drawable.IconCompatParcelizer: androidx.core.graphics.drawable.IconCompat read(androidx.versionedparcelable.VersionedParcel)
kotlin.coroutines.jvm.internal.BaseContinuationImpl: java.lang.StackTraceElement getStackTraceElement()
kotlinx.coroutines.android.AndroidDispatcherFactory: kotlinx.coroutines.android.HandlerContext createDispatcher(java.util.List)
com.google.android.exoplayer2.ExoPlayerImplInternal: ExoPlayerImplInternal(com.google.android.exoplayer2.Renderer[],com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.trackselection.TrackSelectorResult,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.upstream.BandwidthMeter,int,boolean,com.google.android.exoplayer2.analytics.AnalyticsCollector,com.google.android.exoplayer2.SeekParameters,com.google.android.exoplayer2.LivePlaybackSpeedControl,long,boolean,android.os.Looper,com.google.android.exoplayer2.util.Clock,com.google.android.exoplayer2.ExoPlayerImplInternal$PlaybackInfoUpdateListener,com.google.android.exoplayer2.analytics.PlayerId,android.os.Looper)
androidx.window.layout.WindowLayoutInfo: java.lang.String toString()
com.google.android.exoplayer2.audio.AudioCapabilities$Api29: int getMaxSupportedChannelCountForPassthrough(int,int)
androidx.window.embedding.ActivityStack: java.util.List getActivities$window_release()
androidx.window.embedding.ExtensionEmbeddingBackend: void registerSplitListenerForActivity(android.app.Activity,java.util.concurrent.Executor,androidx.core.util.Consumer)
io.flutter.embedding.engine.FlutterJNI: io.flutter.view.FlutterCallbackInformation nativeLookupCallbackInformation(long)
com.google.android.exoplayer2.source.hls.HlsMediaSource$Factory: HlsMediaSource$Factory(com.google.android.exoplayer2.upstream.DataSource$Factory)
androidx.window.layout.WindowMetricsCalculatorCompat: androidx.window.layout.WindowMetrics computeCurrentWindowMetrics(android.app.Activity)
androidx.window.layout.HardwareFoldingFeature$Type$Companion: HardwareFoldingFeature$Type$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
io.flutter.embedding.android.FlutterView: void setWindowInfoListenerDisplayFeatures(androidx.window.layout.WindowLayoutInfo)
com.google.android.exoplayer2.drm.DrmUtil$Api21: boolean isMediaDrmStateException(java.lang.Throwable)
androidx.window.layout.ExtensionInterfaceCompat: void onWindowLayoutChangeListenerAdded(android.app.Activity)
com.google.android.exoplayer2.upstream.DefaultAllocator: void trim()
com.google.android.exoplayer2.source.smoothstreaming.DefaultSsChunkSource: void updateManifest(com.google.android.exoplayer2.source.smoothstreaming.manifest.SsManifest)
kotlinx.coroutines.channels.ArrayChannel: void ensureCapacity(int)
androidx.window.embedding.SplitController$Companion: SplitController$Companion()
androidx.window.embedding.EmbeddingAdapter: java.util.function.Predicate translateActivityPairPredicates(java.util.Set)
androidx.window.R$id: R$id()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback: void onEnd(android.view.WindowInsetsAnimation)
com.google.android.exoplayer2.ExoPlayerImplInternal: void resetInternal(boolean,boolean,boolean,boolean)
com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void maybeStartDeferredRetry(int)
com.google.android.exoplayer2.extractor.mp4.AtomParsers: void parseVideoSampleEntry(com.google.android.exoplayer2.util.ParsableByteArray,int,int,int,int,int,com.google.android.exoplayer2.drm.DrmInitData,com.google.android.exoplayer2.extractor.mp4.AtomParsers$StsdData,int)
io.flutter.embedding.engine.FlutterJNI: void deferredComponentInstallFailure(int,java.lang.String,boolean)
androidx.window.embedding.ActivityFilter: java.lang.String getIntentAction()
androidx.window.layout.SidecarAdapter: java.lang.String access$getTAG$cp()
androidx.window.layout.SidecarWindowBackend$Companion: void resetInstance()
androidx.collection.SimpleArrayMap: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)
io.flutter.embedding.engine.FlutterJNI: void handlePlatformMessage(java.lang.String,java.nio.ByteBuffer,int,long)
com.google.android.exoplayer2.ExoPlayerImplInternal: void notifyTrackSelectionDiscontinuity()
androidx.window.embedding.EmbeddingTranslatingCallback: void accept(java.lang.Object)
com.google.android.exoplayer2.source.hls.HlsSampleStreamWrapper: void maybeFinishPrepare()
androidx.window.layout.HardwareFoldingFeature: androidx.window.layout.FoldingFeature$OcclusionType getOcclusionType()
io.flutter.embedding.engine.FlutterJNI: void nativeDestroy(long)
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1$invokeSuspend$$inlined$collect$1: java.lang.Object emit(java.lang.Object,kotlin.coroutines.Continuation)
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState[] values()
io.flutter.embedding.engine.FlutterJNI: void removeIsDisplayingFlutterUiListener(io.flutter.embedding.engine.renderer.FlutterUiDisplayListener)
io.flutter.embedding.android.RenderMode: io.flutter.embedding.android.RenderMode[] values()
androidx.window.embedding.ExtensionEmbeddingBackend$Companion: androidx.window.embedding.ExtensionEmbeddingBackend getInstance()
com.google.android.exoplayer2.PlaylistTimeline: java.util.List getChildTimelines()
androidx.window.embedding.EmbeddingAdapter: java.util.function.Predicate translateActivityIntentPredicates(java.util.Set)
androidx.window.layout.SidecarAdapter$Companion: androidx.window.layout.DisplayFeature translate$window_release(androidx.window.sidecar.SidecarDisplayFeature,androidx.window.sidecar.SidecarDeviceState)
com.google.android.exoplayer2.source.hls.HlsChunkSource: void getNextChunk(long,long,java.util.List,boolean,com.google.android.exoplayer2.source.hls.HlsChunkSource$HlsChunkHolder)
kotlin.jvm.internal.FunctionReference: FunctionReference(int,java.lang.Object)
kotlin.jvm.internal.CallableReference: kotlin.reflect.KVisibility getVisibility()
io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness: io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness[] values()
androidx.window.layout.SidecarWindowBackend$Companion: SidecarWindowBackend$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
kotlin.coroutines.jvm.internal.BaseContinuationImpl: BaseContinuationImpl(kotlin.coroutines.Continuation)
androidx.window.embedding.EmptyEmbeddingComponent: void setEmbeddingRules(java.util.Set)
androidx.window.layout.ExtensionWindowLayoutInfoBackend: void unregisterLayoutChangeCallback(androidx.core.util.Consumer)
com.google.android.exoplayer2.mediacodec.MediaCodecRenderer$Api31: void setLogSessionIdToMediaCodecFormat(com.google.android.exoplayer2.mediacodec.MediaCodecAdapter$Configuration,com.google.android.exoplayer2.analytics.PlayerId)
com.google.android.exoplayer2.extractor.jpeg.XmpMotionPhotoDescriptionParser: long parseMotionPhotoPresentationTimestampUsFromDescription(org.xmlpull.v1.XmlPullParser)
com.google.android.exoplayer2.source.smoothstreaming.SsMediaPeriod: com.google.android.exoplayer2.source.chunk.ChunkSampleStream buildSampleStream(com.google.android.exoplayer2.trackselection.ExoTrackSelection,long)
androidx.window.embedding.SplitRuleParser: androidx.window.embedding.SplitPairFilter parseSplitPairFilter(android.content.Context,android.content.res.XmlResourceParser)
androidx.core.content.ContextCompat$Api28Impl: java.util.concurrent.Executor getMainExecutor(android.content.Context)
com.google.common.collect.RegularImmutableMap: com.google.common.collect.ImmutableSet createEntrySet()
androidx.window.embedding.ExtensionEmbeddingBackend$EmbeddingCallbackImpl: java.util.List getLastInfo()
androidx.window.layout.SidecarCompat: androidx.window.layout.ExtensionInterfaceCompat$ExtensionCallbackInterface access$getExtensionCallback$p(androidx.window.layout.SidecarCompat)
io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation: io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation valueOf(java.lang.String)
androidx.core.view.ViewCompat$Api21Impl: void setTransitionName(android.view.View,java.lang.String)
androidx.window.layout.SidecarAdapter$Companion: SidecarAdapter$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
androidx.core.view.ViewCompat$Api16Impl: void postOnAnimationDelayed(android.view.View,java.lang.Runnable,long)
com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor: void outputPendingMetadataSamples(long)
androidx.window.layout.WindowMetrics: java.lang.String toString()
androidx.core.view.ViewCompat$Api21Impl: float getElevation(android.view.View)
com.google.android.exoplayer2.PlaylistTimeline: java.lang.Object getChildUidByChildIndex(int)
com.google.android.exoplayer2.source.CompositeSequenceableLoader: boolean continueLoading(long)
androidx.window.layout.HardwareFoldingFeature: android.graphics.Rect getBounds()
androidx.window.core.Bounds: boolean equals(java.lang.Object)
io.flutter.embedding.android.KeyData$Type: io.flutter.embedding.android.KeyData$Type[] values()
androidx.window.layout.FoldingFeature$Orientation$Companion: FoldingFeature$Orientation$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
androidx.window.layout.WindowMetricsCalculator$-CC: void overrideDecorator(androidx.window.layout.WindowMetricsCalculatorDecorator)
kotlin.coroutines.jvm.internal.SuspendLambda: java.lang.String toString()
com.google.android.exoplayer2.metadata.Metadata: int hashCode()
io.flutter.embedding.engine.FlutterJNI: void loadDartDeferredLibrary(int,java.lang.String[])
androidx.window.core.Bounds: int getTop()
com.google.android.exoplayer2.trackselection.BaseTrackSelection: int indexOf(com.google.android.exoplayer2.Format)
androidx.window.core.Version: androidx.window.core.Version access$getUNKNOWN$cp()
kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart[] values()
androidx.core.view.WindowInsetsCompat$BuilderImpl29: androidx.core.view.WindowInsetsCompat build()
androidx.window.layout.SidecarCompat$registerConfigurationChangeListener$configChangeObserver$1: void onLowMemory()
androidx.window.layout.SidecarCompat$registerConfigurationChangeListener$configChangeObserver$1: SidecarCompat$registerConfigurationChangeListener$configChangeObserver$1(androidx.window.layout.SidecarCompat,android.app.Activity)
kotlin.jvm.internal.CallableReference: java.util.List getTypeParameters()
com.google.android.exoplayer2.util.TimedValueQueue: void clear()
androidx.window.core.Bounds: Bounds(android.graphics.Rect)
com.google.android.exoplayer2.audio.AudioAttributes$Api32: void setSpatializationBehavior(android.media.AudioAttributes$Builder,int)
com.google.android.exoplayer2.upstream.SlidingPercentile: void addSample(int,float)
com.google.android.exoplayer2.MediaPeriodHolder: void associateNoSampleRenderersWithEmptySampleStream(com.google.android.exoplayer2.source.SampleStream[])
io.flutter.view.AccessibilityViewEmbedder: java.lang.Integer getRecordFlutterId(android.view.View,android.view.accessibility.AccessibilityRecord)
androidx.window.embedding.SplitRuleParser: android.content.ComponentName buildClassName(java.lang.String,java.lang.CharSequence)
androidx.window.layout.WindowBackend: void registerLayoutChangeCallback(android.app.Activity,java.util.concurrent.Executor,androidx.core.util.Consumer)
io.flutter.embedding.engine.FlutterJNI: void updateSemantics(java.nio.ByteBuffer,java.lang.String[],java.nio.ByteBuffer[])
com.google.common.collect.Iterators$EmptyModifiableIterator: com.google.common.collect.Iterators$EmptyModifiableIterator valueOf(java.lang.String)
androidx.core.view.ViewCompat$Api21Impl: void setNestedScrollingEnabled(android.view.View,boolean)
androidx.window.embedding.ExtensionEmbeddingBackend: java.util.Set getSplitRules()
androidx.window.layout.FoldingFeature$OcclusionType: FoldingFeature$OcclusionType(java.lang.String)
com.google.android.exoplayer2.ExoPlayerImpl: void sendRendererMessage(int,int,java.lang.Object)
androidx.window.layout.SidecarWindowBackend$Companion: boolean isSidecarVersionSupported(androidx.window.core.Version)
com.google.android.exoplayer2.source.dash.DashMediaPeriod: int getPrimaryStreamIndex(int,int[])
com.google.android.exoplayer2.source.hls.HlsMediaPeriod: void discardBuffer(long,boolean)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType: io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType valueOf(java.lang.String)
androidx.window.embedding.EmbeddingBackend: void unregisterSplitListenerForActivity(androidx.core.util.Consumer)
androidx.core.view.ViewCompat$Api21Impl: void setTranslationZ(android.view.View,float)
io.flutter.embedding.android.KeyboardManager$PerEventCallbackBuilder: KeyboardManager$PerEventCallbackBuilder(io.flutter.embedding.android.KeyboardManager,android.view.KeyEvent)
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: android.graphics.SurfaceTexture surfaceTexture()
androidx.window.layout.WindowBackend: void unregisterLayoutChangeCallback(androidx.core.util.Consumer)
com.google.android.exoplayer2.source.smoothstreaming.DefaultSsChunkSource: void release()
androidx.window.layout.SidecarCompat: void onWindowLayoutChangeListenerAdded(android.app.Activity)
androidx.core.view.ViewCompat$Api16Impl: boolean hasTransientState(android.view.View)
io.flutter.embedding.engine.FlutterJNI: void dispatchPointerDataPacket(java.nio.ByteBuffer,int)
androidx.collection.SimpleArrayMap: void ensureCapacity(int)
androidx.window.core.Bounds: int hashCode()
com.google.android.exoplayer2.source.ProgressiveMediaPeriod: int getExtractedSamplesCount()
androidx.window.layout.SidecarWindowBackend: void setWindowExtension(androidx.window.layout.ExtensionInterfaceCompat)
androidx.window.layout.HardwareFoldingFeature$Companion: HardwareFoldingFeature$Companion()
androidx.window.embedding.SplitPairRule: androidx.window.embedding.SplitPairRule plus$window_release(androidx.window.embedding.SplitPairFilter)
com.google.android.exoplayer2.util.CodecSpecificDataUtil: java.lang.String buildHevcCodecString(int,boolean,int,int,int[],int)
androidx.core.view.WindowInsetsCompat$BuilderImpl: void applyInsetTypes()
androidx.window.layout.HardwareFoldingFeature: boolean isSeparating()
androidx.window.embedding.EmbeddingCompat: void setEmbeddingCallback(androidx.window.embedding.EmbeddingInterfaceCompat$EmbeddingCallbackInterface)
com.google.android.exoplayer2.extractor.mp4.Mp4Extractor: com.google.android.exoplayer2.extractor.SeekMap$SeekPoints getSeekPoints(long,int)
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: ExtensionWindowLayoutInfoBackend$MulticastConsumer(android.app.Activity)
com.google.common.collect.RegularImmutableMap$KeysOrValuesAsList: java.lang.Object get(int)
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: void release()
com.google.android.exoplayer2.metadata.Metadata: Metadata(android.os.Parcel)
io.flutter.embedding.android.FlutterView: void setVisibility(int)
androidx.window.layout.SidecarAdapter: java.util.List translate(java.util.List,androidx.window.sidecar.SidecarDeviceState)
kotlinx.coroutines.channels.ArrayChannel: java.lang.Object pollInternal()
io.flutter.embedding.engine.FlutterJNI: boolean nativeGetIsSoftwareRenderingEnabled()
com.google.android.exoplayer2.text.cea.Cea708Decoder: void flush()
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)
io.flutter.embedding.engine.FlutterJNI: android.graphics.Bitmap getBitmap()
androidx.window.embedding.SplitRule: SplitRule(int,int,float,int,int,kotlin.jvm.internal.DefaultConstructorMarker)
com.google.android.exoplayer2.source.hls.HlsSampleStreamWrapper: void onLoaderReleased()
com.google.android.exoplayer2.source.ads.AdPlaybackState: boolean equals(java.lang.Object)
androidx.core.view.ViewCompat$Api23Impl: void setScrollIndicators(android.view.View,int)
androidx.window.layout.SidecarCompat: SidecarCompat(androidx.window.sidecar.SidecarInterface,androidx.window.layout.SidecarAdapter)
io.flutter.embedding.android.KeyboardManager: boolean handleEvent(android.view.KeyEvent)
androidx.collection.SimpleArrayMap: java.lang.Object keyAt(int)
androidx.window.layout.SidecarCompat$DistinctElementCallback: void onWindowLayoutChanged(android.app.Activity,androidx.window.layout.WindowLayoutInfo)
io.flutter.embedding.engine.FlutterJNI: void nativeImageHeaderCallback(long,int,int)
io.flutter.embedding.engine.FlutterJNI: boolean nativeFlutterTextUtilsIsEmojiModifier(int)
androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State[] values()
com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void release()
kotlinx.coroutines.internal.ThreadSafeHeap: void swap(int,int)
androidx.window.embedding.EmbeddingAdapter: java.lang.Object component1(android.util.Pair)
androidx.window.layout.WindowInfoTrackerImpl: androidx.window.layout.WindowBackend access$getWindowBackend$p(androidx.window.layout.WindowInfoTrackerImpl)
com.google.android.exoplayer2.trackselection.TrackSelectorResult: boolean isEquivalent(com.google.android.exoplayer2.trackselection.TrackSelectorResult)
androidx.window.core.Version: java.lang.String toString()
io.flutter.view.AccessibilityViewEmbedder: android.view.accessibility.AccessibilityNodeInfo convertToFlutterNode(android.view.accessibility.AccessibilityNodeInfo,int,android.view.View)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: void install()
io.flutter.embedding.engine.FlutterJNI: void runBundleAndSnapshotFromLibrary(java.lang.String,java.lang.String,java.lang.String,android.content.res.AssetManager,java.util.List)
androidx.window.embedding.EmbeddingAdapter: java.util.Set translate(java.util.Set)
com.google.common.collect.ImmutableCollection$ArrayBasedBuilder: com.google.common.collect.ImmutableCollection$Builder addAll(java.lang.Iterable)
androidx.window.layout.WindowMetricsCalculatorCompat: android.graphics.Rect computeWindowBoundsQ$window_release(android.app.Activity)
androidx.core.view.ViewCompat$Api23Impl: int getScrollIndicators(android.view.View)
android.support.v4.graphics.drawable.IconCompatParcelizer: androidx.core.graphics.drawable.IconCompat read(androidx.versionedparcelable.VersionedParcel)
com.google.android.exoplayer2.drm.DrmInitData: com.google.android.exoplayer2.drm.DrmInitData createSessionCreationData(com.google.android.exoplayer2.drm.DrmInitData,com.google.android.exoplayer2.drm.DrmInitData)
com.google.android.exoplayer2.text.cea.Cea708Decoder: void handleDefineWindow(int)
androidx.window.layout.WindowMetricsCalculator$-CC: androidx.window.layout.WindowMetricsCalculator getOrCreate()
com.google.android.exoplayer2.extractor.mp4.Mp4Extractor: int readSample(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)
androidx.window.layout.SidecarCompat$Companion: androidx.window.core.Version getSidecarVersion()
io.flutter.embedding.engine.plugins.lifecycle.HiddenLifecycleReference: HiddenLifecycleReference(androidx.lifecycle.Lifecycle)
com.google.android.exoplayer2.ExoPlayerImplInternal: void notifyTrackSelectionPlayWhenReadyChanged(boolean)
androidx.window.layout.HardwareFoldingFeature$Type: androidx.window.layout.HardwareFoldingFeature$Type access$getFOLD$cp()
io.flutter.embedding.engine.FlutterJNI: void nativeSetViewportMetrics(long,float,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int[],int[],int[])
kotlin.jvm.internal.CallableReference: CallableReference(java.lang.Object)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: ImeSyncDeferringInsetsCallback(android.view.View)
kotlin.jvm.internal.FunctionReference: int hashCode()
com.google.common.collect.RegularImmutableSet: com.google.common.collect.ImmutableList createAsList()
com.google.android.exoplayer2.source.ads.AdPlaybackState$AdGroup: com.google.android.exoplayer2.source.ads.AdPlaybackState$AdGroup withAdCount(int)
io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness: io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness valueOf(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void nativeSurfaceChanged(long,int,int)
com.google.common.base.AbstractIterator$State: com.google.common.base.AbstractIterator$State valueOf(java.lang.String)
com.google.android.exoplayer2.drm.FrameworkMediaDrm$Api31: boolean requiresSecureDecoder(android.media.MediaDrm,java.lang.String)
androidx.window.core.Bounds: int getRight()
kotlin.jvm.internal.CallableReference: java.lang.Object call(java.lang.Object[])
com.google.android.exoplayer2.source.smoothstreaming.DefaultSsChunkSource: long getAdjustedSeekPositionUs(long,com.google.android.exoplayer2.SeekParameters)
kotlin.coroutines.AbstractCoroutineContextElement: java.lang.Object fold(java.lang.Object,kotlin.jvm.functions.Function2)
io.flutter.embedding.engine.FlutterJNI: void nativeInit(android.content.Context,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,long)
com.google.android.exoplayer2.source.smoothstreaming.SsMediaPeriod: SsMediaPeriod(com.google.android.exoplayer2.source.smoothstreaming.manifest.SsManifest,com.google.android.exoplayer2.source.smoothstreaming.SsChunkSource$Factory,com.google.android.exoplayer2.upstream.TransferListener,com.google.android.exoplayer2.source.CompositeSequenceableLoaderFactory,com.google.android.exoplayer2.drm.DrmSessionManager,com.google.android.exoplayer2.drm.DrmSessionEventListener$EventDispatcher,com.google.android.exoplayer2.upstream.LoadErrorHandlingPolicy,com.google.android.exoplayer2.source.MediaSourceEventListener$EventDispatcher,com.google.android.exoplayer2.upstream.LoaderErrorThrower,com.google.android.exoplayer2.upstream.Allocator)
androidx.window.layout.SidecarWindowBackend: void unregisterLayoutChangeCallback(androidx.core.util.Consumer)
androidx.core.view.ViewCompat$Api21Impl: boolean dispatchNestedPreFling(android.view.View,float,float)
androidx.window.layout.HardwareFoldingFeature: androidx.window.layout.FoldingFeature$State getState()
com.google.android.exoplayer2.source.smoothstreaming.manifest.SsManifestParser$SmoothStreamingMediaParser: java.lang.Object build()
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)
androidx.core.view.ViewCompat$Api21Impl: void setBackgroundTintMode(android.view.View,android.graphics.PorterDuff$Mode)
io.flutter.embedding.engine.FlutterJNI: void onSurfaceDestroyed()
io.flutter.embedding.android.FlutterSplashView$SavedState: java.lang.String access$600(io.flutter.embedding.android.FlutterSplashView$SavedState)
io.flutter.embedding.android.FlutterView: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action valueOf(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void dispatchPlatformMessage(java.lang.String,java.nio.ByteBuffer,int,int)
androidx.window.embedding.SplitPairFilter: boolean matchesActivityPair(android.app.Activity,android.app.Activity)
androidx.collection.SimpleArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)
com.google.android.exoplayer2.ExoPlayerImplInternal: long seekToPeriodPosition(com.google.android.exoplayer2.source.MediaSource$MediaPeriodId,long,boolean,boolean)
io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType: io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType[] values()
androidx.window.layout.SidecarAdapter$Companion: SidecarAdapter$Companion()
io.flutter.embedding.android.FlutterView$ZeroSides: io.flutter.embedding.android.FlutterView$ZeroSides valueOf(java.lang.String)
com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)
androidx.window.embedding.SplitController: SplitController(kotlin.jvm.internal.DefaultConstructorMarker)
kotlin.jvm.internal.FunctionReference: boolean isSuspend()
com.google.android.exoplayer2.source.ads.AdPlaybackState$AdGroup: boolean equals(java.lang.Object)
com.google.android.exoplayer2.extractor.ts.SeiReader: void createTracks(com.google.android.exoplayer2.extractor.ExtractorOutput,com.google.android.exoplayer2.extractor.ts.TsPayloadReader$TrackIdGenerator)
io.flutter.embedding.engine.FlutterJNI: void setViewportMetrics(float,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int[],int[],int[])
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: void setImeVisibleListener(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$ImeVisibleListener)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.WindowInsets access$600(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
io.flutter.embedding.engine.FlutterJNI: void ensureNotAttachedToNative()
kotlin.jvm.internal.Lambda: java.lang.String toString()
com.google.android.exoplayer2.source.hls.HlsSampleStreamWrapper: void resetSampleQueues()
io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation: io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation[] values()
com.google.android.exoplayer2.ExoPlayerImplInternal: com.google.android.exoplayer2.PlaybackInfo handlePositionDiscontinuity(com.google.android.exoplayer2.source.MediaSource$MediaPeriodId,long,long,long,boolean,int)
com.google.android.exoplayer2.source.ClippingMediaPeriod: long seekToUs(long)
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: androidx.window.layout.WindowLayoutInfo getLastInfo()
androidx.window.embedding.SplitPlaceholderRule: SplitPlaceholderRule(java.util.Set,android.content.Intent,int,int,float,int)
com.google.android.exoplayer2.trackselection.MappingTrackSelector$MappedTrackInfo: int getAdaptiveSupport(int,int,int[])
io.flutter.plugin.platform.SingleViewPresentation: io.flutter.plugin.platform.SingleViewPresentation$PresentationState detachState()
androidx.window.core.Version$Companion: androidx.window.core.Version getCURRENT()
androidx.window.layout.SidecarCompat$registerConfigurationChangeListener$configChangeObserver$1: void onConfigurationChanged(android.content.res.Configuration)
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode valueOf(java.lang.String)
androidx.window.embedding.ActivityStack: boolean isEmpty()
androidx.window.layout.FoldingFeature$State$Companion: FoldingFeature$State$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
com.google.android.exoplayer2.mediacodec.MediaCodecUtil$MediaCodecListCompatV21: int getCodecCount()
